#+HUGO_BASE_DIR: ~/hugo-export-tests
#+SITE_TARGET_SUBDIR: tests/hugo/site1
#+TITLE: Test Only


* export babel blocks
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 0
  :END:

#+BEGIN_SRC emacs-lisp
  ;;; Commentary:
  ;;; org-el-untangle:
  ;;; import muliple el files from one folder into one org mode file.
  ;;; org-el-tangle-sections
  ;;; export each sections' emacs-lisp block to a separate file.

  ;;; Code:

  (defun org-el-export-all-sections ()
    "Export each sections' emacs-lisp block to a separate file.
  Add header and footer parts required by flycheck."
    (interactive)
    (let
        ((index 0)
         (root-dir (file-name-directory (buffer-file-name)))
         buffers)
      ;;; First delete old entries, before creating new ones.
      ;;; Prevent duplicate entries due to renumbering.
      (mapc 'delete-file (file-expand-wildcards (concat root-dir "*.el")))
      (org-map-entries 'org-el-export-1-section)
      (message "Export of %d emacs-lisp blocks finished!" index)
      ))

  (defun org-el-export-1-section ()
    "Export this sections' emacs-lisp block to a separate file.
  Add header and footer parts required by flycheck.
  Skip sections marked with COMMENT."
    (let* (body-element
           (element (cadr (org-element-at-point)))
           (title (plist-get element :title))
           (commented (plist-get element :commentedp))
           (filename))
      ;; skip commented sections
      (unless commented
        (setq index (+ 1 index))
        (search-forward "#+BEGIN_SRC")
        (setq body-element (cadr (org-element-at-point)))
        (setq title (replace-regexp-in-string " " "_" title))
        (setq filename (format "%03d_%s.el" index title))
        (with-temp-buffer
          (insert (format ";;; %s --- %s"
                          title
                          (format-time-string "%F %r\n")))
          (goto-char (point-max))
          (insert (plist-get body-element :value))
          (goto-char (point-max))
          (insert (format "(provide '%s)\n;;; %s ends here" title filename))
          (write-file filename)))))

  (eval-after-load 'org
    '(progn
       ;; Note: This keybinding is in analogy to the default keybinding:
       ;; C-c . -> org-time-stamp
       (define-key org-mode-map (kbd "C-c C-M-e") 'org-el-export-all-sections)))
#+END_SRC

* packages moe powerline multiterm
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 1
  :END:

#+BEGIN_SRC emacs-lisp
  ;;; Commentary:
  ;;; this is only some of the packages.
  ;;; Some other required packages are loaded in the following postload files.
  ;;; using prelude-require-package ensures that the packges are loaded
  ;;; at the time required, if necessary.

  ;;; Code:

  ;; include all package repositories needed
  (setq package-archives
        '(("melpa" . "https://melpa.org/packages/")
          ("gnu" . "https://elpa.gnu.org/packages/")
          ("org" . "http://orgmode.org/elpa/")))
  (package-initialize)

  (require 'prelude-packages)

  (prelude-require-packages
   '(
     moe-theme
     powerline
     multi-term))

#+END_SRC

* corfu coordinates and european date
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 2
  :END:
  :END:

#+BEGIN_SRC emacs-lisp
  (setq calendar-latitude [39 37 north])
  (setq calendar-longitude [19 54 east])
  (setq calendar-date-style 'european)
#+END_SRC

* moe theme powerline faces
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 3
  :END:

#+BEGIN_SRC emacs-lisp
  ;;; Commentary:
  ;;; moe-theme

  ;;; Code:
  (prelude-require-package 'moe-theme)
  (setq powerline-moe-theme t)
  ;; (moe-dark)

  (prelude-require-package 'powerline)
  (powerline-default-theme)
  (custom-set-faces
   '(info-title-3 ((t (:inherit info-title-4 :foreground "white" :height 1.2))))
   '(info-title-4 ((t (:inherit info-title-4 :foreground "red"))))
   '(font-lock-variable-name-face ((t
                                    (:foreground "turquoise2"))))
   '(font-lock-comment-delimiter-face ((t
                              (:slant italic :foreground "SeaGreen1"))))
   '(font-lock-comment-face ((t
                              (:slant italic :foreground "coral1"))))
   '(mode-line ((t (
                    :background "midnight blue"
                                :foreground "tomato"
                                :box (:line-width 1 :color "turquoise3")
                                :weight light :height 120 :family "Ubuntu"))))
   '(aw-leading-char-face ((t
                          (:weight bold :foreground "white" :background "red" :inherit
                                   (aw-mode-line-face))))))
#+END_SRC
* cursor
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 4
  :END:

#+BEGIN_SRC emacs-lisp
  ;;; Commentary:
  ;;; basic theming, cursor style.

  ;;; Code:

  (setq cursor-type 'bar)   ;; show cursor as thin vertical bar.
  (blink-cursor-mode 1)     ;; turn on cursor blinking

  (setq visible-bell nil)   ;; instead of ringing a bell ...
  (setq ring-bell-function (lambda () ;; .. invert the mode line colors for 1 second
                             (invert-face 'mode-line)
                             (run-with-timer 1 nil 'invert-face 'mode-line)))

  (set-cursor-color "tomato")
#+END_SRC
* default font size
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 5
  :END:

#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(default ((t
               (:inherit nil :stipple nil :background "#3F3F3F" :foreground "#DCDCCC"
                         :inverse-video nil :box nil :strike-through nil
                         :overline nil :underline nil :slant normal :weight normal
                         :height 120 :width normal
                         :foundry "ADBO" :family "Source Code Pro")))))
#+END_SRC
* parenthesis-colors
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 6
  :END:

#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(rainbow-delimiters-depth-1-face ((t (:foreground "#CCFFCC"))))
   '(rainbow-delimiters-depth-2-face ((t (:foreground "#33FF66"))))
   '(rainbow-delimiters-depth-3-face ((t (:foreground "#009933"))))
   '(rainbow-delimiters-depth-4-face ((t (:foreground "#3366FF"))))
   '(rainbow-delimiters-depth-5-face ((t (:foreground "#77BBFF"))))
   '(rainbow-delimiters-depth-6-face ((t (:foreground "#FFAACC"))))
   '(rainbow-delimiters-depth-7-face ((t (:foreground "gold1"))))
   '(rainbow-delimiters-depth-8-face ((t (:foreground "orange"))))
   '(rainbow-delimiters-depth-9-face ((t (:foreground "red")))))
#+END_SRC

* rainbow blocks
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 7
  :END:

#+BEGIN_SRC emacs-lisp
  (prelude-require-package 'rainbow-blocks)
  (add-hook 'emacs-lisp-mode-hook 'rainbow-blocks-mode)
#+END_SRC

* COMMENT avy-jump-anzu-ace
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 8
  :END:

#+BEGIN_SRC emacs-lisp
  (prelude-require-packages '(avy-zap avy-menu auto-async-byte-compile anzu ace-window ace-popup-menu ace-isearch))
#+END_SRC

* windmove buffermove key func arrow
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 9
  :END:

 #+BEGIN_SRC emacs-lisp
   (prelude-require-package 'buffer-move)
   (global-set-key (kbd "<home>") 'windmove-left)
   (global-set-key (kbd "<prior>") 'windmove-up)
   (global-set-key (kbd "<end>") 'windmove-right)
   (global-set-key (kbd "<next>") 'windmove-down)

   (global-set-key (kbd "S-<home>") 'buf-move-left)
   (global-set-key (kbd "S-<prior>") 'buf-move-up)
   (global-set-key (kbd "S-<end>") 'buf-move-right)
   (global-set-key (kbd "S-<next>") 'buf-move-down)
#+END_SRC

* whitespace and visual line mode
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 10
  :END:

#+BEGIN_SRC emacs-lisp
  ;;; Commentary:
  ;;; turn off whitespace and turn on visual line modes,
  ;;; for these main modes:
  ;;; js, css, web, html, markdown, emacs-lisp, org

  (defun whitespace-off ()
    "Make turning whitespace mode off a command callable from key."
    (interactive)
    (whitespace-mode -1))

  (add-hook 'markdown-mode-hook 'whitespace-off)
  (add-hook 'css-mode-hook 'whitespace-off)
  (add-hook 'html-mode-hook 'whitespace-off)
  (add-hook 'web-mode-hook 'whitespace-off)
  (add-hook 'js-mode-hook 'whitespace-off)
  (add-hook 'org-mode-hook 'whitespace-off)
  (add-hook 'emacs-lisp-mode-hook 'whitespace-off)

  (add-hook 'markdown-mode-hook 'visual-line-mode)
  (add-hook 'css-mode-hook 'visual-line-mode)
  (add-hook 'html-mode-hook 'visual-line-mode)
  (add-hook 'web-mode-hook 'visual-line-mode)
  (add-hook 'js-mode-hook 'visual-line-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
  (add-hook 'emacs-lisp-mode-hook 'visual-line-mode)
#+END_SRC

* turn off auto fill in text mode
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 11
  :END:

Do not turn on auto-fill mode in text or org-mode or related modes.
The culprit in the latest version of emacs is file /Resources/lisp/textmodes/text-mode.el.

For more info, see: https://stackoverflow.com/questions/9878623/how-can-i-disable-auto-fill-mode-in-emacs

#+BEGIN_SRC emacs-lisp
(setq text-mode-hook nil)
#+END_SRC

* multiple-cursors
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 12
  :END:

#+BEGIN_SRC emacs-lisp
  (prelude-require-packages '(multiple-cursors mc-extras ace-mc))

  ;; ace-mc
  (global-set-key (kbd "C-c )") 'ace-mc-add-multiple-cursors)
  (global-set-key (kbd "C-M-)") 'ace-mc-add-single-cursor)

  ;; multiple-cursors

  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  ;; mc-extras

  ;; (define-key mc/keymap (kbd "C-. C-d") 'mc/remove-current-cursor)
  ;; (define-key mc/keymap (kbd "C-. d")   'mc/remove-duplicated-cursors)

  ;; (define-key mc/keymap (kbd "C-. C-.") 'mc/freeze-fake-cursors-dwim)

  ;; (define-key mc/keymap (kbd "C-. =")   'mc/compare-chars)

  ;; Emacs 24.4+ comes with rectangle-mark-mode.
  (define-key rectangle-mark-mode-map (kbd "C-. C-,")
    'mc/rect-rectangle-to-multiple-cursors)

  ;; (define-key cua--rectangle-keymap   (kbd "C-. C-,")
  ;;   'mc/cua-rectangle-to-multiple-cursors)

  (mc/cua-rectangle-setup)
#+END_SRC
* Alternative for forward expression
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 13
  :END:

Because it is used in Manjaro linux for browse clipboard history.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-M-F") 'sp-down-sexp)
#+END_SRC
* multi-term
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 14
  :END:

#+BEGIN_SRC emacs-lisp
  ;;; Commentary:
  ;; Rebind control-x meta-m from shell to multi-term

  ;;; Code:

  (global-set-key (kbd "C-x M-m") 'multi-term)
#+END_SRC
* projectile use commander menu
  :PROPERTIES:
  :DATE:     <2019-06-15 Sat 10:44>
  :EXPORT_HUGO_WEIGHT: 15
  :END:

#+BEGIN_SRC emacs-lisp
  ;;; Commentary:
  ;;; some useful extensions to projectile
  ;;; helm-projectile
  ;;; Note: neither perspective nor helm-perspective work for me.

  ;;; Code:
  ;; (prelude-load-require-packages '(perspective helm-projectile persp-projectile))
  (prelude-require-package 'helm-projectile)
  (helm-projectile-on)
  (setq projectile-switch-project-action #'projectile-commander)
  ;; (persp-mode)
  ;; (require 'persp-projectile)
  ;; (define-key projectile-mode-map (kbd "s-s") 'projectile-persp-switch-project)
#+END_SRC
* disable flyspell
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 16
  :END:

#+BEGIN_SRC emacs-lisp
  (setq prelude-flyspell nil)
#+END_SRC

* sclang
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 17
  :END:

#+BEGIN_SRC emacs-lisp
  (require 'sclang)
  ;; Global keyboard shortcut for starting sclang
  (global-set-key (kbd "C-c M-s") 'sclang-start)
  ;; overrides alt-meta switch command
  (global-set-key (kbd "C-c W") 'sclang-switch-to-workspace)
#+END_SRC

* SuperCollider utils
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 18
  :END:

#+BEGIN_SRC emacs-lisp
  (prelude-require-packages
   '(
     smartparens
     rainbow-delimiters
     ;; auto-complete
                 ))

  ;; (require 'smartparens-config)
  (add-hook 'sclang-mode-hook 'smartparens-mode)
  (add-hook 'sclang-mode-hook 'rainbow-delimiters-mode)
  ;; (add-hook 'sclang-mode-hook 'hl-sexp-mode)
  ;; (add-hook 'sclang-mode-hook 'hs-minor-mode)
  (add-hook 'sclang-mode-hook 'electric-pair-mode)
  ;; (add-hook 'sclang-mode-hook 'yas-minor-mode)
  ;; (add-hook 'sclang-mode-hook 'auto-complete-mode)

  (add-hook 'sclang-mode-hook
            (lambda()
              ;; (local-set-key (kbd "H-b b") 'hs-toggle-hiding)
              ;; (local-set-key (kbd "H-b H-b")  'hs-hide-block)
              ;; (local-set-key (kbd "H-b a")    'hs-hide-all)
              ;; (local-set-key (kbd "H-b H-a")  'hs-show-all)
              ;; (local-set-key (kbd "H-b l")  'hs-hide-level)
              ;; (local-set-key (kbd "H-b H-l")  'hs-show-level)
              ;; (hs-minor-mode 1)
              (visual-line-mode 1)))

  (defun sclang-2-windows ()
    "Reconfigure frame to this window and sclang-post-window."
    (interactive)
    (delete-other-windows)
    (sclang-show-post-buffer))

  (defun scundelify ()
    "Convert //: snippet blocks to regular style () sc blocks in document."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "\n//:" nil t)
        (replace-match "\n\)\n//:")
        (goto-char (line-end-position 2))
        (goto-char (line-beginning-position 1))
        (insert "\(\n")
        (goto-char (line-beginning-position 1))
        (delete-blank-lines))
      (goto-char (point-min))
      (re-search-forward "\)\n//:" nil t)
      (replace-match "\n://:")))

  (defun sclang-server-plot-tree ()
    "Open plotTree for default server."
    (interactive)
    (sclang-eval-string "Server.default.plotTree"))'

  (defun sclang-server-meter ()
    "Open i/o meter for default server."
    (interactive)
    (sclang-eval-string "Server.default.meter"))

  (defun sclang-server-scope ()
    "Open scope for default server."
    (interactive)
    (sclang-eval-string "Server.default.scope"))

  (defun sclang-server-freqscope ()
    "Open frequency scope for default server."
    (interactive)
    (sclang-eval-string "Server.default.freqscope"))

  (defun sclang-extensions-gui ()
    "Open gui for browsing user extensions classes and methods.
    Type return on a selected item to open the file where it is defined."
    (interactive)
    (sclang-eval-string "Class.extensionsGui;"))
#+END_SRC
* SuperCollider-hydra-snippets
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 19
  :END:

#+BEGIN_SRC emacs-lisp
  (prelude-require-package 'hydra)

  (defhydra hydra-snippets (
                            ;; sclang-mode-map "C-L"
                                            :color red :columns 3)
    "SC Snippet hydra"
    ("n" sclang-goto-next-snippet "next")
    ("p" sclang-goto-previous-snippet "previous")
    ("N" sclang-goto-next-heading "next heading")
    ("P" sclang-goto-previous-heading "previous heading")
    ("x" sclang-cut-current-snippet "cut")
    ("c" sclang-copy-current-snippet "copy")
    ("2" sclang-duplicate-current-snippet "duplicate")
    ;; ("s" sclang-copy-current-snippet "select")
    ("u" sclang-transpose-snippet-up "transpose up")
    ("d" sclang-transpose-snippet-down "transpose down")
    ("." sclang-eval-current-snippet "eval")
    ("[" sclang-eval-previous-snippet "eval prev")
    ("]" sclang-eval-next-snippet "eval next")
    ("e" sclang-extensions-gui "browse classes and methods")
    ("C-p" sclang-players-gui "players gui")
    ("q" quit "quit" :exit t))

  (defun quit ()
    "Empty function placeholder to quit hydras."
    (interactive)
    (message "quit"))

  (defun sclang-get-current-snippet ()
    "Return region between //: comments in sclang, as string.
    If the beginning of line is '//:+', then fork the snippet as routine.
    If the beginning of line is '//:*', then wrap the snippet in loop and fork."
    (save-excursion
      (goto-char (line-end-position)) ;; fix when starting from point-min
      (let (
            (snippet-begin (search-backward-regexp "^//:" nil t))
            snippet-end
            snippet
            snippet-head
            (prefix ""))
        (unless snippet-begin
          (setq snippet-begin (point-min))
          (setq prefix "//:\n"))
        (setq sclang-snippet-is-routine nil)
        (setq sclang-snippet-is-loop nil)
        (goto-char snippet-begin)
        (setq snippet-head (buffer-substring-no-properties (point) (+ 4 (point))))
        (if (equal snippet-head "//:+") (setq sclang-snippet-is-routine t))
        (if (equal snippet-head "//:*") (setq sclang-snippet-is-loop t))
        (goto-char (line-end-position))
        (setq snippet-end (search-forward-regexp "^//:" nil t))
        (if snippet-end
            (setq snippet-end (line-beginning-position))
          (setq snippet-end (point-max)))
        (concat prefix
                (buffer-substring-no-properties snippet-begin snippet-end)))))

  (defun sclang-cut-current-snippet ()
    "Return region between //: comments in sclang, as string, and cut it out."
    (interactive)
    (save-excursion
      (goto-char (line-end-position)) ;; fix when starting from point-min
      (let (
            (snippet-begin (search-backward-regexp "^//:" nil t))
            snippet-end
            snippet
            (prefix ""))
        (unless snippet-begin
          (setq snippet-begin (point-min))
          (setq prefix "//:\n"))
        (goto-char (line-end-position))
        (setq snippet-end (search-forward-regexp "^//:" nil t))
        (if snippet-end
            (setq snippet-end (line-beginning-position))
          (setq snippet-end (point-max)))
        (setq snippet (concat prefix
                              (buffer-substring-no-properties snippet-begin snippet-end)))
        (kill-region snippet-begin snippet-end))))

  (defun sclang-transpose-snippet-down ()
    "Transpose this snippet with the one following it."
    (interactive)
    (sclang-cut-current-snippet)
    (sclang-goto-next-snippet)
    (insert "\n")
    (yank)
    (delete-blank-lines)
    (re-search-backward "^//:")
    (goto-char (line-end-position 2)))

  (defun sclang-transpose-snippet-up ()
    "Transpose this snippet with the one preceding it."
    (interactive)
    (sclang-cut-current-snippet)
    (re-search-backward "^//:")
    (yank)
    (re-search-backward "^//:")
    (goto-char (line-end-position 2)))

  (defun sclang-eval-current-snippet (&optional player-p)
    "Evaluate the current snippet in sclang.
    If PLAYER-P, then append +> PLAYERNAME.
    PLAYERNAME is filename without extension.
    A snippet is a block of code enclosed between comments
    starting at the beginning of line and with a : following immediately after '//'.
    If the beginning of line is '//:+', then fork the snippet as routine.
    If the beginning of line is '//:*', then wrap the snippet in loop and fork."
    (interactive "P")
    (let* (sclang-snippet-is-routine
           sclang-snippet-is-loop
           (snippet (sclang-get-current-snippet)))
      (if sclang-snippet-is-routine
          (setq snippet (format "{\n %s\n }.fork" snippet)))
      (if sclang-snippet-is-loop
          (setq snippet (format "{\n loop {\n %s \n} \n }.fork" snippet)))
      (sclang-eval-string
       (if player-p
           (concat snippet " +> \\"
                   (file-name-sans-extension
                    (file-name-nondirectory (buffer-file-name))))
           snippet) t)))

  (defun sclang-goto-next-snippet ()
    "Go to the next snippet."
    (interactive)
    (goto-char (sclang-end-of-snippet))
    (goto-char (line-end-position 2))
    (goto-char (line-beginning-position)))

  (defun sclang-goto-next-heading ()
    "Go to the next snippet heading."
    (interactive)
    (goto-char (sclang-end-of-snippet))
    (forward-char 3)
    ;; (goto-char (line-end-position 2))
    ;; (goto-char (line-beginning-position))
    )

  (defun sclang-goto-previous-snippet ()
    "Go to the previous snippet."
    (interactive)
    (goto-char (line-end-position))
    (let ((pos (search-backward-regexp "^//:" nil t)))
      (if (and pos (> pos 1)) (goto-char (1- pos)))
      (setq pos (search-backward-regexp "^//:" nil t))
      (cond
       (pos
        (goto-char pos)
        (goto-char (1+ (line-end-position)))
        (goto-char (line-beginning-position)))
       (t
        (goto-char (point-min))))
      ;; (re-search-backward "^//:")
      ))

  (defun sclang-goto-previous-heading ()
    "Go to the previous snippet heading."
    (interactive)
    (goto-char (line-end-position))
    (let ((pos (search-backward-regexp "^//:" nil t)))
      (if (and pos (> pos 1)) (goto-char (1- pos)))
      (setq pos (search-backward-regexp "^//:" nil t))
      (cond
       (pos
        (goto-char (+ 3 pos))
        ;; (goto-char (1+ (line-end-position)))
        ;; (goto-char (line-beginning-position))
        )
       (t
        (goto-char (point-min))))
      ;; (re-search-backward "^//:")
      ))
  (defun sclang-eval-next-snippet ()
    "Go to the next snippet and evaluate it."
    (interactive)
    (sclang-goto-next-snippet)
    (sclang-eval-current-snippet))

  (defun sclang-eval-previous-snippet ()
    "Go to the previous snippet and evaluate it."
    (interactive)
    (sclang-goto-previous-snippet)
    (sclang-eval-current-snippet))

  (defun sclang-duplicate-current-snippet ()
    "Insert a copy the current snippet below itself."
    (interactive)
    (let ((snippet (sclang-get-current-snippet)))
      (goto-char (line-end-position))
      (goto-char (sclang-end-of-snippet))
      (if (eq (point) (point-max)) (insert "\n"))
      (insert snippet)))

  (defun sclang-copy-current-snippet ()
    "Copy the current snippet into the kill ring."
    (interactive)
    (let ((snippet (sclang-get-current-snippet)))
      (kill-new snippet)))

  (defun sclang-region-select-current-snippet ()
    "Select region between //: comments in sclang."
    (save-excursion
      (goto-char (line-end-position)) ;; fix when starting from point-min
      (let (
            (snippet-begin (search-backward-regexp "^//:" nil t))
            snippet-end
            snippet
            snippet-head)
        (unless snippet-begin
          (setq snippet-begin (point-min)))
        (goto-char snippet-begin)
        (goto-char (line-end-position))
        (setq snippet-end (search-forward-regexp "^//:" nil t))
        (if snippet-end
            (setq snippet-end (line-beginning-position))
          (setq snippet-end (point-max)))
        (goto-char snippet-begin)
        (push-mark snipet-end)
        (setq mark-active t))))

  ;; (defun sclang-cut-current-snippet ()
  ;;   "Kill the current snippet, storing it in kill-ring."
  ;;   (sclang-region-select-current-snippet)
  ;;   (kill-region (mark) (point)))

  (defun sclang-end-of-snippet ()
    "Return the point position of the end of the current snippet."
    (save-excursion
      (let ((pos (search-forward-regexp "^//:" nil t)))
        (if pos (line-beginning-position) (point-max)))))

  (defun sclang-beginning-of-snippet ()
    "Return the point position of the beginning of the current snippet."
    (save-excursion
      (goto-char (line-end-position))
      (let ((pos (search-backward-regexp "^//:" nil t)))
        (if pos pos (point-min)))))

  (defun sclang-insert-snippet-separator (&optional before)
    "Insert snippet separator //: at beginning of line."
    (interactive "P")
    (cond
     (before
      (goto-char (line-beginning-position))
      (insert "//:\n"))
     (t
      (goto-char (line-end-position))
      (insert "\n//:"))
     ))

  (defun sclang-insert-snippet-separator+ (&optional before)
    "Insert snippet separator //:+ at beginning of line."
    (interactive "P")
    (cond (before
           (goto-char (line-beginning-position))
           (insert "//:+\n"))
          (t
           (goto-char (line-end-position))
           (insert "\n//:+"))
          ))

  (defun sclang-insert-snippet-separator* (&optional before)
    "Insert snippet separator //:* at beginning of line."
    (interactive "P")
    (cond (before
           (goto-char (line-beginning-position))
           (insert "//:*\n"))
          (t
           (goto-char (line-end-position))
           (insert "\n//:*"))
          ))
#+END_SRC

* SuperCollider-hydra-general
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 20
  :END:

#+BEGIN_SRC emacs-lisp
  ;; mode-map does not work because it is overwritten by global sclang-mode=map settings
  ;; in a different file here.
  (defhydra hydra-sclang (
                          ;; sclang-mode-map "C-S"
                                          :color red :columns 3)
      "SC utils hydra"
      ("k" sclang-kill "kill sc")
      ("b" sclang-server-boot "boot server")
      ("q" sclang-server-quit "quit server")
      ("t" sclang-osc-trace-on "osc trace on")
      ("T" sclang-osc-trace-off "osc trace off")
      ("p" sclang-server-plot-tree "server plot nodes")
      ("i" sclang-sclang-set-io-channels "set io channels")
      ("m" sclang-server-meter "meter")
      ("s" sclang-server-scope "scope")
      ("f" sclang-server-freqscope "freqscope")
      ("a" sclang-server-free-all "server free all")
      ("l" sclang-snippet-list "snippet list")
      ("L" sclang-player-snippet-list "player snippet list")
      ("e" quit "exit hydra" :exit t))

  (defun sclang-osc-trace-on ()
    "Turn OSCFunc trace on."
    (interactive)
    (sclang-eval-string "OSCFunc.trace(true)"))

  (defun sclang-osc-trace-off ()
    "Turn OSCFunc trace off."
    (interactive)
    (sclang-eval-string "OSCFunc.trace(false)"))

  (defun sclang-server-plot-tree ()
    "Show server node tree gui."
    (interactive)
    (sclang-eval-string "Server.default.plotTree"))

  (defun sclang-snippet-list ()
    "Open SnippetList gui."
    (interactive)
    (sclang-eval-string "SnippetList.gui"))

  (defun sclang-player-snippet-list ()
    "Open PlayerSnippetList gui."
    (interactive)
    (sclang-eval-string "PlayerSnippetList.gui"))
#+END_SRC

* sclang mode keybindings
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 21
  :END:

#+BEGIN_SRC emacs-lisp
  ;;; Commentary:

  ;; free prefixes and allocation for hydras
  ;; C-S-c + any key except C-S-c and c.
  ;; possible allocations:
  ;; lang: l, server: s, snippets: S, osc: o,  midi: m

  ;; other free prefixes:
  ;; C-S
  ;; C-L sclang
  ;; C-T
  ;; C-B

  ;; commands to allocate - in groups
  ;; server group:
  ;; boot, quit, meter, scope, freqscope, record, stoprecording, kill all servers

  ;; lang group:
  ;; start, stop, recompile, view extensions, help, open startup, open extensions

  ;; snippet group
  ;; open snippets, next, previous, eval, eval next, eval previous, copy, select,
  ;; duplicate, cut, move down, move up

  ;; osc group: trace on, trace off

  ;; midi group:

  ;;; Code:
  (eval-after-load 'sclang
    (progn
      ;; these are disabled by sclang-bindings:
      ;; (define-key sclang-mode-map (kbd "C-c C-p t") 'sclang-server-plot-tree)
      ;; (define-key sclang-mode-map (kbd "C-c C-p m") 'sclang-server-meter)
       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; sc-hacks gui commands:
      (define-key sclang-mode-map (kbd "C-h g s") 'sclang-startupfiles-gui)
      (define-key sclang-mode-map (kbd "C-h g a") 'sclang-audiofiles-gui)
      (define-key sclang-mode-map (kbd "C-h g p") 'sclang-players-gui)
      (define-key sclang-mode-map (kbd "C-h g e") 'sclang-extensions-gui)
      (define-key sclang-mode-map (kbd "C-h g n") 'sclang-nevent-gui)
      (define-key sclang-mode-map (kbd "C-S-s") 'hydra-snippets/body)
      (define-key sclang-mode-map (kbd "C-S-l") 'hydra-sclang/body)
       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Server state visualisation utilities
      ;; TODO: Check and re-assign these commands for consistency with
      ;; default sclang commands C-c C-p x:
      (define-key sclang-mode-map (kbd "C-c P p") 'sclang-server-plot-tree)
      (define-key sclang-mode-map (kbd "C-c P m") 'sclang-server-meter)
      (define-key sclang-mode-map (kbd "C-c P s") 'sclang-server-scope)
      (define-key sclang-mode-map (kbd "C-c P f") 'sclang-server-freqscope)
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       ;;;;;;;;;;;;;;;;;;       snippet commands      ;;;;;;;;;;;;;;;;;;
      ;; eval current snippet               M-C-x
      ;; goto next snippet                  M-n
      ;; goto previous snippet              M-p
      ;; eval previous snippet              M-P
      ;; eval next snippet                  M-N
      ;; duplicate current snippet          M-D
      ;; copy current snippet               M-C
      ;; select region of current snippet   M-R
      ;; cut current snippet                M-T
      ;; transpose snippet down             C-M-N
      ;; transpose snippet up               C-M-P

      (define-key sclang-mode-map (kbd "M-X") 'sclang-eval-current-snippet)
      (define-key sclang-mode-map (kbd "C-M-x") 'sclang-eval-current-snippet)
      (define-key sclang-mode-map (kbd "M-n") 'sclang-goto-next-snippet)
      (define-key sclang-mode-map (kbd "M-p") 'sclang-goto-previous-snippet)
      (define-key sclang-mode-map (kbd "M-N") 'sclang-eval-next-snippet)
      (define-key sclang-mode-map (kbd "M-P") 'sclang-eval-previous-snippet)
      (define-key sclang-mode-map (kbd "M-D") 'sclang-duplicate-current-snippet)
      (define-key sclang-mode-map (kbd "M-C") 'sclang-copy-current-snippet)
      (define-key sclang-mode-map (kbd "M-R") 'sclang-region-select-current-snippet)
      (define-key sclang-mode-map (kbd "M-T") 'sclang-cut-current-snippet)
      (define-key sclang-mode-map (kbd "C-M-N") 'sclang-transpose-snippet-down)
      (define-key sclang-mode-map (kbd "C-M-P") 'sclang-transpose-snippet-up)


      ;; (define-key sclang-mode-map (kbd "M-C-.") 'sclang-duplicate-current-snippet)
      ;; (define-key sclang-mode-map (kbd "M-n") 'sclang-goto-next-snippet)
      ;; (define-key sclang-mode-map (kbd "M-N") 'sclang-eval-next-snippet)
      ;; (define-key sclang-mode-map (kbd "M-C-S-n") 'sclang-move-snippet-down)
      ;; (define-key sclang-mode-map (kbd "M-p") 'sclang-goto-previous-snippet)
      ;; (define-key sclang-mode-map (kbd "M-P") 'sclang-eval-previous-snippet)
      ;; (define-key sclang-mode-map (kbd "M-C-S-p") 'sclang-move-snippet-up)X

      (define-key sclang-mode-map (kbd "H-=") 'sclang-insert-snippet-separator+)
      (define-key sclang-mode-map (kbd "H-8") 'sclang-insert-snippet-separator*)

       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Miscellaneous
      (define-key sclang-mode-map (kbd "C-S-c c") 'sclang-clear-post-buffer)

      (key-chord-define sclang-mode-map "11" 'sclang-2-windows)
      ;; (key-chord-define sclang-mode-map "''" 'sclang-plusgt)
      ;; (key-chord-define sclang-mode-map ";;" 'sclang-ltplus)
      ;; (key-chord-define sclang-mode-map "\\\\" 'sclang-xgt)
      ))
#+END_SRC

* prelude-off
  :PROPERTIES:
  :DATE:     <2019-06-15 Sat 11:07>
  :EXPORT_HUGO_WEIGHT: 22
  :END:

#+BEGIN_SRC emacs-lisp
  ;;; Commentary:

  ;; define prelude-off function to permit
  ;; functions which use it.
  ;; Prelude off is missing from latest version of prelude

  ;;; Code:

  (defun prelude-off ()
    "Allow call of this empty function for packages that require it."
    (interactive)
    ;; do nothing
    )
#+END_SRC

* org mode jump to heading
  :PROPERTIES:
  :DATE:     <2019-06-15 Sat 13:02>
  :EXPORT_HUGO_WEIGHT: 23
  :END:

See:

#+BEGIN_SRC emacs-lisp
  ;;; Commentary:

  ;; these settins are needed to use C-c C-j org-goto
  ;; or C-c C-i imenu-anywhere properly on the current buffer
  ;; C-c C-j is more predictable than C-c C-i,
  ;;; Code:

  (setq org-goto-interface 'outline-path-completion
        org-goto-max-level 10)

  ;; use C-u C-c C-w org-refile:

  (setq org-outline-path-complete-in-steps nil)
#+END_SRC

* org mode bullets
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 24
  :END:

#+BEGIN_SRC emacs-lisp
  ;;; Commentary:
  ;; pretty bullets for org mode sections

  ;;; Code:
  (prelude-require-package 'org-bullets)

  ;;; use bullets currently displayable by emacson macos 10.13 and arch linux 18:
  (setq org-bullets-bullet-list
        '(
          "⦿" "●" "○" "⧁" "⟾" "⤇" "⟹" "⥤" "⟶" "◎" "◆" "◇" "■" "□" "◼" "◻" "⚙"
          ))
#+END_SRC
* org mode agenda
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 25
  :END:

#+BEGIN_SRC emacs-lisp
(setq org-agenda-sticky t) ;; open agenda and todo views in separate buffers
#+END_SRC

* org mode attachments
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 26
  :END:

#+BEGIN_SRC emacs-lisp
(setq org-attach-directory (file-truename "~/Documents/org-attachments/"))
#+END_SRC

* org mode faces
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 27
  :END:

#+BEGIN_SRC emacs-lisp
(custom-set-faces
   ;; #ef2929
   ;; '(org-priority ((t (:background "#ff5959" :foreground "gray99"))) t)
   ;; '(org-block-end-line ((t (:background "#2a2a2f" :foreground "gray99"))) t)
   ;; '(org-block-begin-line ((t (:background "#3a2a2f" :foreground "gray99"))) t)
   ;; '(org-level-1 ((t (:family "Helvetica" :height 1.1 :weight bold))))
   ;; ;; thinner org-level-2 face for kanji
   ;; '(org-level-2
   ;;   ((t
   ;;     (:family "Inconsolata" :height 1.1 :weight light :box nil
   ;;              :foreground "#a1db00" :inherit
   ;;              (outline-2)))))<
   ;; '(org-level-1 ((t (:family "Courier New" :height 1.1 :weight bold))))
   ;; '(org-level-2 ((t (:family "Courier New" :height 1.1 :weight bold))))
   '(org-level-1 ((t (:weight bold :height 1.7 :family "Source Code Pro"))))
   '(org-level-2 ((t (:weight bold :height 1.5))))
   '(org-level-3 ((t (:weight bold :height 1.2))))
   '(org-level-4 ((t (:weight bold :height 1.1))))
   '(org-level-5 ((t (:weight bold :height 1.1))))
   '(org-level-6 ((t (:weight bold :height 1.1))))
   '(org-level-7 ((t (:weight bold :height 1.1))))
   '(org-level-8 ((t (:weight bold :height 1.1))))
   '(org-level-9 ((t (:weight bold :height 1.1)))))
#+END_SRC

* org mode utils and key map
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 28
  :END:
#+BEGIN_SRC emacs-lisp
  ;;; Commentary:

  ;;; utils and key map

  ;;; Code:

    (defun org-set-date (&optional active property)
      "Set DATE property with current time.  Active timestamp."
      (interactive "P")
      (org-set-property
       (if property property "DATE")
       (cond ((equal active nil)
              (format-time-string (cdr org-time-stamp-formats) (current-time)))
             ((equal active '(64))
              (concat "["
                      (substring
                       (format-time-string (cdr org-time-stamp-formats) (current-time))
                       1 -1)
                      "]"))
             ((equal active '(16))
              (concat
               "["
               (substring
                (format-time-string (cdr org-time-stamp-formats) (org-read-date t t))
                1 -1)
               "]"))
             ((equal active '(4))
              (format-time-string (cdr org-time-stamp-formats) (org-read-date t t))))))

    (defun org-insert-current-date (arg)
      "Insert current date in format readable for org-capture minibuffer.
        If called with ARG, do not insert time."
      (interactive "P")
      (if arg
          (insert (format-time-string "%e %b %Y"))
        (insert (format-time-string "%e %b %Y %H:%M"))))

        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; make heading movement commands skip initial * marks
    (defun org-jump-forward-heading-same-level (&optional do-cycle)
      "Jump forward heading same level, and skip to beginning of heading itself."
      (interactive "P")
      (org-forward-heading-same-level 1)
      (re-search-forward " ")
      (if do-cycle (org-cycle)))

    (defun org-jump-backward-heading-same-level (&optional do-cycle)
      "Jump backward heading same level, and skip to beginning of heading itself."
      (interactive "P")
      (org-backward-heading-same-level 1)
      (re-search-forward " ")
      (if do-cycle (org-cycle)))

    (defun jump-outline-up-heading (&optional do-cycle)
      "Jump upward heading, and skip to beginning of heading itself."
      (interactive "P")
      (outline-up-heading 1)
      (re-search-forward " ")
      (if do-cycle (org-cycle)))

    (defun jump-outline-next-visible-heading ()
      "Jump to next visible heading, and skip to beginning of heading itself."
      (interactive)
      (outline-next-visible-heading 1)
      (re-search-forward " "))

    (defun jump-outline-previous-visible-heading ()
      "Jump to previous visible heading, and skip to beginning of heading itself."
      (interactive)
      (outline-previous-visible-heading 1)
      (re-search-forward " "))

    (defun jump-outline-previous-visible-heading-and-cycle ()
      "Jump to previous visible heading, and hide subtree."
      (interactive)
      (outline-previous-visible-heading 1)
      (re-search-forward " ")
      (org-cycle))

    (defun jump-outline-next-visible-heading-and-cycle ()
      "Jump to previous visible heading, and hide subtree."
      (interactive)
      (outline-next-visible-heading 1)
      (re-search-forward " ")
      (org-cycle))

    (defun org-find-next-src-block ()
      "Search for next #+BEGIN_SRC block header."
      (interactive)
      (re-search-forward "\\#\\+BEGIN_SRC " nil t))

        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ;; This is run once after loading org for the first time
    ;; It adds some org-mode specific key bindings.
    (eval-after-load 'org
      '(progn
         (define-key org-mode-map (kbd "C-M-S-o") 'hydra-org/body)
         (define-key org-mode-map (kbd "C-M-S-h") 'hydra-hugo/body)
         ;; alias for org-cycle, more convenient than TAB
         (define-key org-mode-map (kbd "C-M-]") 'org-cycle)
         ;; Use deft to customize org-latex export of current org-mode buffer
         ;; (define-key org-mode-map (kbd "C-c M-r") 'org-deft-latex-recipes)
         ;; Note: This keybinding is in analogy to the default keybinding:
         ;; C-c . -> org-time-stamp
         (define-key org-mode-map (kbd "C-c C-.") 'org-set-date)
         (define-key org-mode-map (kbd "C-M-{") 'backward-paragraph)
         (define-key org-mode-map (kbd "C-M-}") 'forward-paragraph)
         (define-key org-mode-map (kbd "C-c C-S") 'org-schedule)
         (define-key org-mode-map (kbd "C-c C-s") 'sclang-main-stop)
         (define-key org-mode-map (kbd "C-c >") 'sclang-show-post-buffer)
         ;; own additions after org-config-examples below:
         (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-cite-with-completion)
         (define-key org-mode-map (kbd "C-M-S-n") 'org-next-src-block)
         (define-key org-mode-map (kbd "C-M-S-p") 'org-show-properties-block)
         (define-key org-mode-map (kbd "C-M-/") 'org-sclang-eval-babel-block)
                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
         ;; from: http://orgmode.org/worg/org-configs/org-config-examples.html
         ;; section navigation;
         (define-key org-mode-map (kbd "M-n") 'jump-outline-next-visible-heading)
         (define-key org-mode-map (kbd "C-M-n") 'jump-outline-next-visible-heading-and-cycle)
         ;; (define-key org-mode-map (kbd "C-M-N") 'org-find-next-src-block)
         (define-key org-mode-map (kbd "M-p") 'jump-outline-previous-visible-heading)
         (define-key org-mode-map (kbd "C-M-p") 'jump-outline-previous-visible-heading-and-cycle)
         (define-key org-mode-map (kbd "C-M-f") 'org-jump-forward-heading-same-level)
         (define-key org-mode-map (kbd "C-M-b") 'org-jump-backward-heading-same-level)
         (define-key org-mode-map (kbd "C-M-u") 'jump-outline-up-heading)
         ;; table
         (define-key org-mode-map (kbd "C-M-w") 'org-table-copy-region)
         (define-key org-mode-map (kbd "C-M-y") 'org-table-paste-rectangle)
         (define-key org-mode-map (kbd "C-M-l") 'org-table-sort-lines)
         ;; display images
         (define-key org-mode-map (kbd "M-I") 'org-toggle-iimage-in-org)
         ;; Following are the prelude-mode binding, minus the conflicting table bindings.
         ;; prelude-mode is turned off for org mode, below.
         (define-key org-mode-map (kbd "C-c o") 'crux-open-with)
         ;; (define-key org-mode-map (kbd "C-c g") 'prelude-google)
         ;; (define-key org-mode-map (kbd "C-c G") 'crux-github)
         ;; (define-key org-mode-map (kbd "C-c y") 'prelude-youtube)
         ;; (define-key org-mode-map (kbd "C-c U") 'prelude-duckduckgo)
         ;;     ;; mimic popular IDEs binding, note that it doesn't work in a terminal session
         (define-key org-mode-map [(shift return)] 'crux-smart-open-line)
         (define-key org-mode-map (kbd "M-o") 'crux-smart-open-line)
         (define-key org-mode-map [(control shift return)] 'crux-smart-open-line-above)
         (define-key org-mode-map [(control shift up)]  'move-text-up)
         (define-key org-mode-map [(control shift down)]  'move-text-down)
         (define-key org-mode-map [(control meta shift up)]  'move-text-up)
         (define-key org-mode-map [(control meta shift down)]  'move-text-down)
         ;;     ;; the following 2 break structure editing with meta-shift-up / down in org mode
         ;;     ;;    (define-key map [(meta shift up)]  'move-text-up)
         ;;     ;;    (define-key map [(meta shift down)]  'move-text-down)
         ;;     ;; new substitutes for above:  (these are overwritten by other modes...)
         ;;     ;; (define-key map (kbd "C-c [")  'move-text-up)
         ;;     ;; (define-key map (kbd "C-c ]")  'move-text-down)
         ;;     ;; (define-key map [(control meta shift up)]  'move-text-up)
         ;;     ;; (define-key map [(control meta shift down)]  'move-text-down)
         (define-key org-mode-map (kbd "C-c n") 'crux-cleanup-buffer-or-region)
         (define-key org-mode-map (kbd "C-c f") 'crux-recentf-ido-find-file)
         (define-key org-mode-map (kbd "C-M-z") 'crux-indent-defun)
         (define-key org-mode-map (kbd "C-c u") 'crux-view-url)
         (define-key org-mode-map (kbd "C-c e") 'crux-eval-and-replace)
         (define-key org-mode-map (kbd "C-c s") 'crux-swap-windows)
         (define-key org-mode-map (kbd "C-c D") 'crux-delete-file-and-buffer)
         (define-key org-mode-map (kbd "C-c d") 'crux-duplicate-current-line-or-region)
         (define-key org-mode-map (kbd "C-c M-d") 'crux-duplicate-and-comment-current-line-or-region)
         (define-key org-mode-map (kbd "C-c r") 'crux-rename-buffer-and-file)
         (define-key org-mode-map (kbd "C-c t") 'crux-visit-term-buffer)
         (define-key org-mode-map (kbd "C-c k") 'crux-kill-other-buffers)
         ;;     ;; another annoying overwrite of a useful org-mode command:
         ;;     ;; (define-key map (kbd "C-c TAB") 'prelude-indent-rigidly-and-copy-to-clipboard)
         (define-key org-mode-map (kbd "C-c S") 'crux-find-shell-init-file)
         ;; replace not functioning 'prelude-goto-symbol with useful imenu-anywhere
         ;; icicles no longer available in 201906:
         ;; (define-key org-mode-map (kbd "C-c i") 'icicle-imenu)
         (define-key org-mode-map (kbd "C-c i") 'imenu)
         (define-key org-mode-map (kbd "C-c C-M-i") 'imenu-anywhere)
         ;; (define-key org-mode-map (kbd "C-c I") 'crux-find-user-init-file)
         ;;     ;; extra prefix for projectile
         (define-key org-mode-map (kbd "s-p") 'projectile-command-map)
         ;;     ;; make some use of the Super key
         (define-key org-mode-map (kbd "s-g") 'god-local-mode)
         (define-key org-mode-map (kbd "s-r") 'crux-recentf-ido-find-file)
         (define-key org-mode-map (kbd "s-j") 'crux-top-join-line)
         (define-key org-mode-map (kbd "s-k") 'crux-kill-whole-line)
         (define-key org-mode-map (kbd "s-m m") 'magit-status)
         (define-key org-mode-map (kbd "s-m l") 'magit-log)
         (define-key org-mode-map (kbd "s-m f") 'magit-log-buffer-file)
         (define-key org-mode-map (kbd "s-m b") 'magit-blame)
         (define-key org-mode-map (kbd "s-o") 'crux-smart-open-line-above)
         (define-key org-mode-map (kbd "C-c C-M-w") 'org-copy-contents)
         ))

    (defun org-copy-contents ()
      "Copy contents of current section to kill ring."
      (interactive)
      (let* ((element (org-element-at-point))
             (begin (plist-get (cadr element) :contents-begin))
             (end (plist-get (cadr element) :contents-end)))
        (copy-region-as-kill begin end)))

    (defun org-next-src-block ()
      "Jump to the next src block using SEARCH-FORWARD."
      (interactive)
      (search-forward "\n#+BEGIN_SRC")
      (let ((block-beginning (point)))
        (org-show-entry)
        (goto-char block-beginning)
        (goto-char (line-end-position 2))))

    (defun org-show-properties-block ()
      "Show the entire next properties block using SEARCH-FORWARD."
      (interactive)
      (search-forward ":PROPERTIES:")
      (let ((block-beginning (point)))
        (org-show-entry)
        (goto-char block-beginning)
        (org-cycle)
        ;; (goto-char (line-end-position 2))
        ;; (org-hide-block-toggle t)
        ))

    ;; org-mode-hook is run every time that org-mode is turned on for a buffer
    ;; It customizes some settings in the mode.
    (add-hook
     'org-mode-hook
     (lambda ()
           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       ;; own stuff:
       ;; Make javascript blocks open in sclang mode in org-edit-special
       ;; This is because sclang blocks must currently be marked as javascript
       ;; in order to render properly with hugo / pygments for webite creation.
       (setq org-src-lang-modes (add-to-list 'org-src-lang-modes '("javascript" . sclang)))
       (setq org-hide-leading-stars t)
       ;; (org-indent-mode) ;; this results in added leading spaces in org-edit-special
       (visual-line-mode)
       ;; turn off prelude mode because its key bindings interfere with table bindings.
       ;; Instead, the prelude-mode keybindings have been copied to org-mode above,
       ;; minus the unwanted keybindings for tables.
       (prelude-off)
       ;; disable whitespace mode, which was previously disabled by prelude-mode
       (org-bullets-mode)
       (whitespace-mode -1)
       ))

    ;; (defun org-customize-mode ()
    ;;   "Customize some display options for ORG-MODE.
    ;; - map javascript to sclang-mode in babel blocks.
    ;; - hide extra leading stars for sections.
    ;; - turn on visual line mode."
    ;; )

    (global-set-key (kbd "C-c C-x t") 'org-insert-current-date)
#+END_SRC

* calendar

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c C-c") 'calendar)
#+END_SRC

* org journal
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 29
  :END:

#+BEGIN_SRC emacs-lisp
  ;;; Commentary:
  ;;; use org-journal for capture globally into files named by date number.
  ;;; https://github.com/bastibe/org-journal.
  ;;; Set agenda folders and files.
  ;;; Define custom agenda commands.

  ;;; Code:

  (prelude-require-package 'org-journal)

  ;; Create files with .org ending to automatically enable org-mode when loading them:
  (setq org-journal-file-format "%Y%m%d.org")

  ;; allow input of dates before 1970
  (setq org-read-date-force-compatible-dates nil)

  (defun org-journal-new-entry-from-org-timestamp ()
    "Like org-journal-new-entry except read time interactively using org-read-date."
    (interactive)
    (org-journal-new-entry nil (apply 'encode-time (org-parse-time-string (org-read-date t t)))))

  ;; Use own path for journal dir:
  ;; (setq org-journal-dir (file-truename "~/Documents/000WORKFILES/PERSONAL/journal"))
  ;; On 27 Jun 2018 16:01 get stack overflow with above. changing now to this:
  (setq org-journal-dir (file-truename "~/journal"))

  ;; Use own path for diary dir:
  (setq org-agenda-diary-file 'diary-file)
  ;; (setq diary-file (concat (file-name-directory org-journal-dir) "diary"))
  (setq diary-file (file-truename "~/Documents/000Workfiles/PERSONAL/diary"))
  (setq org-agenda-include-diary t)

  (defcustom org-projects-dir (file-truename "~/Documents/000Workfiles/PROJECTS_CURRENT")
    "Directory containing project entries.
    Setting this will update auto-mode-alist using
    `(org-journal-update-auto-mode-alist)`"
    :type 'string :group 'org-journal
    :set (lambda (symbol value)
           (set-default symbol value)
           (org-journal-update-auto-mode-alist)))

  ;; provide custom refile targets for todo entries
  ;; NOTE: This function is also used in custom function org-jump-to-refile-target.

  (defun org-iz-make-refile-targets ()
  "Provide custom refile targets for todo entries.
  This function is also used in custom function org-jump-to-refile-target."
  (setq org-refile-targets
        (append
         (mapcar (lambda (x) (cons x '(:maxlevel . 2)))
                 (file-expand-wildcards (concat org-todo-dir "/*.org")))
         (mapcar (lambda (x) (cons x '(:maxlevel . 2)))
                 (file-expand-wildcards (concat org-projects-dir "/*.org"))))))

  ;; Include all journal and todo files in agenda:
  (setq org-agenda-files `(,org-journal-dir
                           ,org-projects-dir))

  (defun org-journal-at-date-from-user (no-entry)
    "Creat journal entry with date from user, NO-ENTRY prefix just opens the file without creating entry."
    (interactive "P")
    (let ((time (org-read-date t t)) timestamp)
      (org-journal-new-entry no-entry time)
      (setq timestamp (format-time-string (cdr org-time-stamp-formats) time))
      ;; (if no-entry
      ;;     (insert "\n" timestamp))
      (unless no-entry
        (progn
          (insert
           "\n :PROPERTIES:\n :DATE: "
           timestamp
           " \n :END:\n")
          (previous-line 4)
          (end-of-line)))))

  (defun org-journal-at-date-from-calendar (no-entry)
    "Creat journal entry on calendar cursor date, if NO-ENTRY do not create entry."
    (interactive "P")
    (let* ((monthdayyear (calendar-cursor-to-date))
           (month (car monthdayyear))
           (day (cadr monthdayyear))
           (year (caddr monthdayyear))
           (time (encode-time 0 0 7 day month year))
           (timestamp (format-time-string (cdr org-time-stamp-formats) time)))
      (message "Creating entry at: %s" timestamp)
      (org-journal-new-entry no-entry time)
      ;; (setq timestamp (format-time-string (cdr org-time-stamp-formats) time))
      ;; (if no-entry
      ;;     (insert "\n" timestamp))
      (unless no-entry
        (progn
          (insert
           "\n :PROPERTIES:\n :DATE: "
           timestamp
           " \n :END:\n")
          (previous-line 2)
          (end-of-line)
          (backward-char 4)
          (org-time-stamp t)))))

  (defun my/bindkey-recompile ()
    "Bind <F5> to `recompile'."
    (local-set-key (kbd "J") 'org-journal-at-date-from-calendar))

  (add-hook 'calendar-mode-hook 'my/bindkey-recompile)

  ;; Define custom agenda commands for some useful tag searches
  ;; NOTE: These are the keys used by default agenda dispatch menu:
  ;; a t T m M e s S / < > # ! C
  ;;
  ;; a     Call `org-agenda-list' to display the agenda for current day or week.
  ;; t     Call `org-todo-list' to display the global todo list.
  ;; T     Call `org-todo-list' to display the global todo list, select only
  ;;             entries with a specific TODO keyword (the user gets a prompt).
  ;; m     Call `org-tags-view' to display headlines with tags matching a condition  (the user is prompted for the condition).
  ;; M     Like `m', but select only TODO entries, no ordinary headlines.
  ;; e     Export views to associated files.
  ;; s     Search entries for keywords.
  ;; S     Search entries for keywords, only with TODO keywords.
  ;; /     Multi occur across all agenda files and also files listed in `org-agenda-text-search-extra-files'.
  ;; <     Restrict agenda commands to buffer, subtree, or region. Press several times to get the desired effect.
  ;; >     Remove a previous restriction.
  ;; #     List \"stuck\" projects.
  ;; !     Configure what \"stuck\" means.
  ;; C     Configure custom agenda commands.

  ;;       Any own keys should be other than the above!

  (setq org-agenda-custom-commands
        '(("A" tags "+avarts")
          ("E" tags "+eastndc")
          ("p" tags "+phd")
          ("w" tags "+weinstein")
          ("h" tags "+health")
          ("f" tags "+finance")
          ("c" tags "+correspondence")))

  ;; Make new-entry keyboard command available also in org-mode:
  (global-set-key (kbd "C-c c j") 'org-journal-at-date-from-user)
  (global-set-key (kbd "C-c c J") 'org-journal-new-entry-from-org-timestamp)
#+END_SRC

* org-mode todo states and priorities
  :PROPERTIES:
  :DATE:     <2017-12-22 Fri 01:42>
  :EXPORT_HUGO_WEIGHT: 30
  :END:

#+BEGIN_SRC emacs-lisp
  ;; Experimental, 29 Sep 2018 04:25
  ;; after https://orgmode.org/manual/Fast-access-to-TODO-states.html#Fast-access-to-TODO-states

  ;; Example of more elaborate todo keywords
  ;; (setq org-todo-keywords
  ;;       '((sequence "TODO(t)" "|" "DONE(d)")
  ;;         (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
  ;;         (sequence "|" "CANCELED(c)")))

  ;; Example of custom colors for keywords
  ;; (setq org-todo-keyword-faces
  ;;       '(("TODO" . (:foreground "#ff39a3" :weight bold))
  ;;         ("STARTED" . "#E35DBF")
  ;;         ("CANCELED" . (:foreground "white" :background "#4d4d4d" :weight bold))
  ;;         ("DELEGATED" . "pink")
  ;;         ("POSTPONED" . "#008080")))
  ;;

  (setq org-todo-keywords
        '((sequence "TODO(t)" "|" "TAZE(z)" "|" "STARTED(s@)" "|" "BAYAT(b)" "|" "DONE(d@)")
          (sequence "|" "URGENT(u)")
          (sequence "|" "DELEGATED(l)")
          (sequence "|" "CANCELED(c)")
          (sequence "|" "POSTPONED(p)")))

  (setq org-todo-keyword-faces
        '(("TODO" . (:foreground "red1" :weight bold))
          ("TAZE" . (:foreground "green3" :background "navy" :weight bold))
          ("URGENT" . (:foreground "red1" :background "orange1" :weight bold))
          ("STARTED" . (:foreground "salmon" :weight bold))
          ;; ("STARTED" . "#E35DBF")
          ("CANCELED" . (:foreground "white" :background "#4d4d4d" :weight bold))
          ("DELEGATED" . (:foreground "orange2" :background "#4d4d4d" :weight bold))
          ("POSTPONED" . (:foreground "dark cyan" :weight bold))
          ("BAYAT" . (:foreground "gainsboro" :weight bold))
          ;; ("POSTPONED" . "#008080")
          ))


  (setq org-lowest-priority 77) ;; Set possible priorities range from A to M
  (setq org-default-priority 77) ;; List TODOS without priority setting at the bottom
#+END_SRC
* org calfw
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 31
  :END:

#+BEGIN_SRC emacs-lisp
  ;;; Commentary:
  ;;; use calfw package to display agenda in calendar-grid format
  ;;; Provide commands for generation of entries on current date on calendar grid

  ;;; Code:

  (prelude-require-packages '(calfw calfw-org calfw-cal))

  (require 'calfw)
  (require 'calfw-org)
  (require 'calfw-cal)


  (setq calendar-christian-all-holidays-flag t)

  (setq org-capture-use-agenda-date t)

  (setq cfw:org-overwrite-default-keybinding t)

  (defun org-calfw-here (&optional arg)
    "Open calfw on the file of the present buffer."
    (interactive "P")
    (when (and (buffer-file-name) (eq major-mode 'org-mode))
      (if arg
          (setq org-agenda-files (list (buffer-file-name)))
        (add-to-list 'org-agenda-files (buffer-file-name))))
    ;; (org-log-here (buffer-file-name) t)
    (cfw:open-org-calendar))

  ;; (defun cfw:org-capture (prefix)
  ;;   "Overwrite original to run own cfw:org-capture-at-date instead."
  ;;   (interactive "P")
  ;;   (cfw:org-journal-at-date prefix))

  (defun cfw:org-journal-at-date-from-cursor (prefix)
    "Run org-journal-new-entry with ORG-OVERRIDING-DEFAULT-TIME from cursor."
    (interactive "P")
    (with-current-buffer  (get-buffer-create cfw:calendar-buffer-name)
      (let* ((pos (cfw:cursor-to-nearest-date))
             (org-overriding-default-time
              (encode-time 0 0 7
                           (calendar-extract-day pos)
                           (calendar-extract-month pos)
                           (calendar-extract-year pos)))
             (timestamp (format-time-string (cdr org-time-stamp-formats)
                                            org-overriding-default-time)))
        (org-journal-new-entry prefix org-overriding-default-time)
        (unless prefix
          (insert
           "\n :PROPERTIES:\n :DATE: "
           timestamp
           " \n :END:\n")
          (previous-line 2)
          (end-of-line)
          (backward-char 4)
          (org-time-stamp t)
          ;; (org-insert-time-stamp org-overriding-default-time t)
          ;; (backward-word)
          ;; (backward-word)
          ;; (paredit-forward-kill-word)
          ;; (paredit-forward-kill-word)
          ))))

  (defun cfw:org-journal-entry-for-now (prefix)
    "Run org-journal-new-entry with date+time timestamp from current time."
    (interactive "P")
    (with-current-buffer  (get-buffer-create cfw:calendar-buffer-name)
      (let* ((pos (cfw:cursor-to-nearest-date))
             (org-overriding-default-time (apply 'encode-time (decode-time))
                                          ;; (encode-time 0 0 7
                                          ;;              (calendar-extract-day pos)
                                          ;;              (calendar-extract-month pos)
                                          ;;              (calendar-extract-year pos))
                                          ))
        (org-journal-new-entry prefix org-overriding-default-time)
        (org-insert-time-stamp org-overriding-default-time t))))

  (defun org-jump-to-refile-target ()
    "Make org-refile with prefix available as command.
    Also, always update refile targets before running org-refile.
    This ensures that files changed / created recently will be taken into account."
    (interactive)
    (org-iz-make-refile-targets)
    (org-refile '(4)))

  (global-set-key (kbd "M-C-g") 'org-jump-to-refile-target)
  (global-set-key (kbd "C-c c c") 'org-calfw-here)
  (global-set-key (kbd "C-c C J") 'cfw:org-journal-entry-for-now)
  ;; journal entry for Now (current date and time at time of command)
  (define-key
    cfw:calendar-mode-map "N" 'cfw:org-journal-entry-for-now)
  ;; journal entry for Here (date at cursor on calfw buffer)
  (define-key
    cfw:calendar-mode-map "H" 'cfw:org-journal-at-date-from-cursor)


  ;; (define-key
  ;;   cfw:calendar-mode-map "C" 'cfw:org-journal-entry-for-now)
  ;; (define-key
  ;;   cfw:calendar-mode-map "c" 'cfw:org-journal-at-date-from-cursor)

  (provide '018_calfw)
    ;;; 018_calfw.el ends here
#+END_SRC





* org compile latex with custom framework
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 32
  :END:

#+BEGIN_SRC emacs-lisp
  ;;; Commentary:

  ;; 28 Feb 2019 14:18 ff
  ;; New version: Using a set framework.tex file
  ;; The framework file is in a folder that may contain all other necessary assets
  ;; e.g. bib or graphics files.
  ;; The org source is exported as body.tex and then imported by the framework file
  ;; using \input{body.tex}
  ;; The pdf output file is copied to the exports folder with a name
  ;; provided by the user and a timestamp.

  ;; Compile org mode buffer to pdf using these options:
  ;; 1. xelatex or pdflatex
  ;; 2. whole buffer or current subtree only

  ;; Instead of defining the latex header using org-mode/emacs,
  ;; output the latex body only, and then import it in a framework template
  ;; specified by the user.
  ;; Use latex \import{file} directive inside template file to import the body
  ;; exported by org-mode.
  ;; To specify the template file that you want to use in an org-mode-file or section,
  ;; store it as file or subtree property "LATEX_EXPORT_TEMPLATE."

  ;; A. How the template path is stored in the org file:

  ;; A1: If the export option current subtree is chosen, then:
  ;; A1.1 Get the path stored in property "LATEX_EXPORT_TEMPLATE" in the current subtree
  ;; A1.2 If the path is not found in property of A1.1, then get the global property "LATEX_EXPORT_TEMPLATE".
  ;; A1.3 If none of the above 1 and 2 are found, then use the default path: ~/latex-exports/templates/00BASIC/framework.tex
  ;; A1.4 If the path given is a directory, then append to it "framework.tex".  Else use the path as-is.

  ;; B. How the template is used for compiling.

  ;; Note: By framework file we mean the file specified by the user, which will provide
  ;; the necessary header and footer.
  ;; By <template> we mean the path of the directory which contains the framework file.
  ;; The framework file must contain an input statement: \input{body.tex}.
  ;; Org exports the chosen subtree or the entire buffer as body only, into the file:
  ;; <template>body.tex.
  ;; Then it compiles the file <template>/framework.tex
  ;; It uses as output a name chosen interactively from the user, and always adds a date stamp to it.
  ;; After compiling, it copies the resulting pdf file into the folder ~/latex-exports/exports/

  ;; (defun org-insert-latex-headers-from-deft ()
  ;;   "Choose latex headers from recipe list using deft, and append them to the currently edited file."
  ;;   (with-current-buffer
  ;;     ))

  ;;; Code:

  ;; First load this package to initialize variables:
  (require 'ox-latex)

  ;; Use xelatex as latex compiler, thus enabling use of native fonts for greek etc.
  (setq org-latex-compiler "xelatex")

  (defcustom org-latex-export-path (file-truename "~/latex-exports")
    "Directory where latex exports are stored."
    :group 'org-latex-compile)

  (defcustom org-latex-bib-folder "/bibliographies/"
    "Directory where default bib files are stored.
  This is a subdirectory of ORG-LATEX-EXPORT-PATH."
    :group 'org-latex-compile)

  (defcustom org-latex-bib-filename "References.bib"
    "Name of default bib file."
    :group 'org-latex-compile)

  (defun org-latex-bib-full-path ()
    "Calculate full path of file to default bib file.
  Concatenate org-latex-export-path with org-latex-bib-folder and org-latex-bib-filename."
    (concat org-latex-export-path org-latex-bib-folder org-latex-bib-filename))

  (defun org-latex-default-template-path ()
    "Calculate full path of file to default template framework file.
  Concatenate org-latex-export-path with default path.
  Issue error if latex-export folder has not been installed."
    (let ((template-path (concat org-latex-export-path
                                 "/templates/00BasicGreek/framework.tex")))
      (if (file-exists-p template-path)
          template-path
        (error "You must install latex-templates in your home folder to use this."))))

  (defun org-latex-body-path (framework-path)
    "Calculate full path of file to body file from FRAMEWORK-PATH."
    (concat (file-name-directory framework-path) "body.tex"))

  (defun org-pdflatex-compile-buffer ()
    "Export buffer as body.tex and create pdf with pdflatex using template.
  The template for the buffer is chosen by org-latex-get-file-template-path."
    (interactive)
    ;;                               pdflatexp subtreep
    (org-latex-compile-with-template t         nil))

  (defun org-xelatex-compile-buffer ()
    "Export buffer as body.tex and create pdf with xelatex using template.
  The template for the buffer is chosen by org-latex-get-file-template-path."
    (interactive)
    ;;                               pdflatexp subtreep
    (org-latex-compile-with-template nil        nil))

  (defun org-pdflatex-compile-subtree ()
    "Export subtree as body.tex and create pdf with pdflatex using template.
  The template for the buffer is chosen by org-latex-get-file-template-path."
    (interactive)
    ;;                               pdflatexp subtreep
    (org-latex-compile-with-template t         t))

  (defun org-xelatex-compile-subtree ()
    "Export subtree as body.tex and create pdf with xelatex using template.
  The template for the buffer is chosen by org-latex-get-file-template-path."
    (interactive)
    ;;                               pdflatexp subtreep
    (org-latex-compile-with-template nil        t))

  (defun org-latex-compile-with-template (pdflatexp subtreep)
    "Export buffer or subtree as body.tex and create pdf using template.
  If PDFLATEXP then use pdflatex, else use xelatex.
  If SUBTREEP then export subtree only, else export entire buffer.
  The template for the buffer is chosen by org-latex-get-file-template-path."
    (let*
        ((template-path (if subtreep
                            (org-latex-get-subtree-template-path)
                          (org-latex-get-file-template-path)))
         (template-directory (file-name-directory template-path))
         (export-file-copy-path
          (concat
           org-latex-export-path "/exports/"
           (read-string
            "pdf export file copy name base:"
            (if subtreep
                (substring-no-properties
                 (replace-regexp-in-string "\\W" ""  (org-get-heading t t)))
              (file-name-nondirectory (file-name-sans-extension
                                       (buffer-file-name)))))
           "_"
           (format-time-string "%y%m%d")
           ".pdf"))
         (body-path (concat template-directory "body.tex"))
         (latex-output (org-export-as
                        ;; backend subtreep visible-only body-only ext-plist
                        'latex     subtreep      nil          t         nil
                        )))
      ;; prepare body file containing plain tex body output
      (with-temp-buffer
        (insert latex-output)
        (write-file body-path))
      ;; compile framework and body files into framework.pdf file
      (latex-compile-file-with-latexmk pdflatexp template-path t) ;; t: do not open!
      (copy-file
       (concat (file-name-sans-extension template-path) ".pdf")
       export-file-copy-path
       t)
      ;; open the copy of the exported file:
      (shell-command (concat "open " (shell-quote-argument export-file-copy-path)))
      (message "pdf export file copied to:\n%s" export-file-copy-path)))

  (defun xelatex-compile-buffer ()
    "Compile current tex buffer into PDF using xelatex.
  Use latexmk command as seen in org-mode export code."
    (interactive)
    (latex-compile-file-with-latexmk))

  (defun pdflatex-compile-buffer ()
    "Compile current tex buffer into PDF using pdflatex.
  Use latexmk command as seen in org-mode export code."
    (interactive)
    (latex-compile-file-with-latexmk t))

  (defun latex-compile-file-with-latexmk (&optional pdflatexp filename donotopen)
    "Compile tex file using latexmk.
  If PDFLATEXP then use pdflatex instead of xelatex.
  Open resulting pdf file with default macos open method."
    (let* ((file (or filename (buffer-file-name)))
           (pdf-file (concat
                      (file-name-sans-extension file)
                      ".pdf"))
           (org-latex-pdf-process
            (if pdflatexp
                '("latexmk -shell-escape -g -pdf -pdflatex=\"pdflatex\" -outdir=%o %f")
              '("latexmk -shell-escape -g -pdf -pdflatex=\"xelatex\" -outdir=%o %f"))))
      (message "latex compile command is:\n %s" org-latex-pdf-process)
      (delete-file (concat (file-name-sans-extension file) ".bbl"))
      (org-latex-compile file)
      (message "tex->pdf done. Opening:\n%s" (shell-quote-argument pdf-file))
      (unless donotopen
        (shell-command (concat "open " (shell-quote-argument pdf-file))))))

  (defun org-latex-post-file-template-path ()
    "Post the path of the latex template file for this file."
    (interactive)
    (message "The file template path is:\n%s" (org-latex-get-file-template-path)))

  (defun org-latex-get-file-template-path ()
    "Get the path of the latex template file from the LATEX_HEADER_PATH property of this file."
    (save-excursion
      (org-with-wide-buffer
       (goto-char (point-min))
       (let* ((property-value (org-latex-default-template-path))
              (property-name "LATEX_HEADER_PATH")
              (here (re-search-forward
                     (concat "^"
                             (regexp-quote (concat "#+" property-name ":"))
                             " ?") nil t)))
         (message "found here: %s" here)
         (when here
           (goto-char here)
           ;; (message (buffer-substring-no-properties here (line-end-position)))
           (setq property-value (buffer-substring-no-properties here (line-end-position))))
         property-value))))

  (defun org-latex-post-subtree-template-path ()
    "Post the path of the latex template file for current subtree."
    (interactive)
    (message "The subtree template path is:\n%s" (org-latex-get-subtree-template-path)))

  (defun org-latex-get-subtree-template-path ()
    "Get path of the latex template file from LATEX_HEADER_PATH property of current subtree."
    (save-excursion
      (org-with-wide-buffer
       (goto-char (point-min)))
      (let* ((property-name "LATEX_HEADER_PATH")
             (property-value (org-entry-get (point) property-name)))
        (if property-value
            property-value
          (org-latex-get-file-template-path)))))

  (defun org-latex-set-subtree-template ()
    "Set value of LATEX_HEADER_PATH property in current subtree."
    (interactive)
    (let ((path (org-latex-read-template-path)))
     (org-set-property "LATEX_HEADER_PATH" path)
     (message "You selected: \n%s" path)))

  (defun org-latex-read-template-path ()
    "Read template path interactively from default folder."
    (let
        ((result
          (read-file-name "Select template file: " "~/latex-exports/templates" "framework.tex")))
      (if (file-directory-p result)
          (concat result "framework.tex")
        result)))

  (defun org-latex-set-buffer-template ()
    "Set value of LATEX_HEADER_PATH property globally in current buffer."
    (interactive)
    (let ((path (org-latex-read-template-path)))
      (save-excursion
        (org-with-wide-buffer
         (goto-char (point-min))
         (let ((new-line "")
               (here (re-search-forward
                      (concat "^"
                              (regexp-quote (concat "#+" "LATEX_HEADER_PATH" ":"))
                              " ?") nil t)))
           (cond
            (here
             (goto-char here)
             (beginning-of-line)
             (kill-line))
            (t
             (setq new-line "\n")
             (goto-char (point-min))))
           (insert "#+LATEX_HEADER_PATH: " path new-line))))
      (message "You selected: \n%s" path)))

  (defun org-latex-set-buffer-export-name (&optional name)
    "Set value of LATEX_EXPORT_NAME property globally in current buffer."
    (interactive "sName: ")
    (org-set-subtree-or-buffer-property "LATEX_EXPORT_NAME" name t))

  (defun org-latex-set-subtree-export-name (&optional name)
    "Set value of LATEX_EXPORT_NAME property in current subtree."
    (interactive "sName: ")
    (org-set-subtree-or-buffer-property "LATEX_EXPORT_NAME" name nil))

  (defun org-set-subtree-or-buffer-property (property value bufferp)
    "Set PROPERTY to VALUE, in buffer if BUFFERP, else in subtree."
    (if bufferp
        (save-excursion
          (org-with-wide-buffer
           (goto-char (point-min))
           (let ((new-line "")
                 (here (re-search-forward
                        (concat "^"
                                (regexp-quote (concat "#+" property ":"))
                                " ?") nil t)))
             (cond
              (here
               (goto-char here)
               (beginning-of-line)
               (kill-line))
              (t
               (setq new-line "\n")
               (goto-char (point-min))))
             (insert "#+" property ": " value new-line))))
      (org-set-property property value))
    (message "You selected: \n%s" value))

  (defun org-get-custom-property (property-name)
    "Get property PROPERTY-NAME locally or globally."
    ;; (interactive "M")
    (unless property-name (setq property-name "LATEX_HEADER_PATH"))
    (let ((property-value (org-entry-get (point) property-name)))
      ;; (message "I found this: %s" property-value)
      (unless property-value
        (save-excursion
          (goto-char (point-min))
          (let ((here (re-search-forward
                       (concat "^"
                               (regexp-quote (concat "#+" property-name ":"))
                               " ?") nil t)))
            ;; (message "found here: %s" here)
            (when here
              (goto-char here)
              ;; (message (buffer-substring-no-properties here (line-end-position)))
              (setq property-value (buffer-substring-no-properties here (line-end-position))))
            )))
      property-value
      ))

  (defun org-latex-find-file-template-file ()
    "Open file's template file."
    (interactive)
    (find-file (org-latex-get-file-template-path)))

  (defun org-latex-find-subtree-template-file ()
    "Open file's template file."
    (interactive)
    (find-file (org-latex-get-subtree-template-path)))

  ;;; redoing the fucker
  (defhydra hydra-latex (:color red :columns 2)
    "latex hydra"

    ("x" org-xelatex-compile-buffer "ORG xelatex buffer")
    ("X" org-xelatex-compile-subtree "ORG xelatex subtree")
    ("l" pdflatex-compile-buffer "TEX pdflatex buffer")
    ("L" xelatex-compile-buffer "TEX xelatex buffer")
    ("p" org-pdflatex-compile-buffer "ORG pdflatex buffer")
    ("P" org-pdflatex-compile-subtree "ORG pdflatex subtree")
    ("t" org-latex-set-buffer-template "set buffer template")
    ("T" org-latex-set-subtree-template "set subtree template")
    ("/" org-latex-post-file-template-path "post file template path")
    ("?" org-latex-post-subtree-template-path "post subtree template path")
    ("f" org-latex-find-file-template-file "find file template file")
    ("F" org-latex-find-subtree-template-file "find subtree template file")
    ("q" quit "exit hydra" :exit t))

  (global-set-key (kbd "C-M-S-l") 'hydra-latex/body)
#+END_SRC

* COMMENT ox-hugo : usage notes
  :PROPERTIES:
  :DATE:     <2019-06-15 Sat 11:02>
  :EXPORT_HUGO_WEIGHT: 33
  :END:

From: https://ox-hugo.scripter.co/

** COMMENT Recommended export strategy

- do not set a title globally
- set the EXPORT_FILE_NAME in at least one section, to export it
- set the HUGO_BASE_DIR property globally.
  One possible configuration is to store the source org-mode file 
  in a subfolder inside the hugo site and to set HUGO_BASE_DIR to ../
  This will make ox-hugo export the md files to the contents
  subfolder inside the hugo site.
- Use the command H A Export all "What I Mean", to export 
  all sections with EXPORT_FILE_NAME to the contents folder.

** COMMENT After exporting: Rendering to local server for testing

Use =hugo -b ...= to render the site with paths fitting to the url which you want to use.
A single =hugo= command can render directly from the contents directory to the target folder.  The right base url must be specified. The relevant command arguments are documented in https://gohugo.io/commands/hugo/ and are:

#+BEGIN_QUOTE
  -b, --baseURL string         hostname (and path) to the root, e.g. http://spf13.com/
  -c, --contentDir string      filesystem path to content directory
  -d, --destination string     filesystem path to write files to
#+END_QUOTE

Use command =hugo-render= to construct the 3 parameters baseURL, contentDir and and destination string and execute the hugo command with them.

Here design notes for this command: 

*** COMMENT hugo-render

Use command hugo-render to render the md files from the contents folder to the local webserver site folder using the =hugo= shell command. 
Here is an example tested successfully on 21 Jun 2019 11:07:

: hugo -b http://localhost/tests/test1/ -c ./content -d /usr/share/nginx/html/tests/test1/

Following second test confirms that the -c (content directory) path can be given in full (tested 21 Jun 2019 11:11)

: hugo -b http://localhost/tests/test2/ -c /home/iani/Dev/SITES/learn1/content -d /usr/share/nginx/html/tests/test2/

NOTE: The above did not work with =start-process= or with babel shell or even with multi-term terminal.  Hugo fails to finde any short codes for unknown reason. When removing short codes, it does not find the template for HTML and does not produce an index page. Possibly the environment is different. 

Therefore we try copying to clipboard, so that it can be pasted as a command in an external terminal, which works.

#+BEGIN_SRC emacs-lisp
(kill-new "Again: Hello World")
#+END_SRC

#+RESULTS:
: Again: Hello World

**** COMMENT Failed tests

 Did not work with =start-process hugo=, therefore testing babel shell:

 #+BEGIN_SRC shell
 hugo -b http://localhost/tests/test2/ -c /home/iani/Dev/SITES/learn1/content -d /usr/share/nginx/html/tests/test2/
 #+END_SRC

 #+RESULTS:

 The lisp code to execute the hugo shell command may be:

 #+BEGIN_SRC elisp
  (start-process "hugo"
                 (get-buffer-create "*hugo*")
                 "/usr/bin/hugo"
                 "-b"
                 "http://localhost/tests/test3/"
                 "-c"
                 "/home/iani/Dev/SITES/learn1/content"
                 "-d"
                 "/usr/share/nginx/html/tests/test3/"
   )
#+END_SRC

Steps for implementing hugo-render:

- assume that the site is rendered in folder =public=.
- assume that source org-mode buffer from which the command =hugo-render-and-copy= command is being executed is located in a subfolder of the folder containing =public=, at the same level as =public=.  I.e. the folder tree looks like this:

#+BEGIN_EXAMPLE
[-] /home/iani/Dev/SITES/learn1/
 |-[+] .git
 |-[+] archetypes
 |-[+] content
 |-[+] data
 |-[+] layouts
 |-[+] public ;; THIS IS WHERE THE .md FILES ARE EXPORTED
 |-[+] resources
 |-[-] source
 |  `- source.org ;; THIS IS THE SOURCE FILE FOR THE SITE
 |-[+] static
 |-[+] themes
 |- .gitmodules
 `- config.toml
#+END_EXAMPLE

- get the path of the folder containing =public=.  Use the relative path stored in =HUGO_BASE_DIR= for this.  I.e. use the following algorithm to get the directory path of the folder that should be copied to the local host site directory:
- expand the relative file name given in =HUGO_BASE_DIR= to the full path:

#+BEGIN_SRC emacs-lisp
(expand-file-name "../")
#+END_SRC

#+RESULTS:
: /home/iani/Dev/EMACS/emacs-prelude-personal-arch/

  - append the render target directory to the absolute path obtained:

#+BEGIN_SRC emacs-lisp
(concat (expand-file-name "../") "public")
#+END_SRC

#+RESULTS:
: /home/iani/Dev/EMACS/emacs-prelude-personal-arch/public

  - Store in =rendered-site-dir= the path of the target folder where the rendered site (public) should be copied:
    - Concatenate custom variable =local-server-base-path= with file property =SITE_TARGET_SUBDIR=.
    - Note: the default value for =local-server-base-path= for nginx on my arch linux laptop is: =/usr/share/nginx/html/=.
      To this one may add subfolders for exporting several sites to separate locations.
      e.g. If =SITE_TARGET_SUBDIR= is =tests/hugo/test1=, then =rendered-site-dir= is:
      =/usr/share/nginx/html/tests/hugo/test1=.
  - Store in =local-site-url= the url of the local site, to be used for rendering the site with 
    the command: =hugo -b <local-site-url>=. 
      The url for rendering and accessing any of these sites is obtained by:
      =(concat "http://localhost/" site_target_subdir)=. 
      e.g. If =SITE_TARGET_SUBDIR= is =tests/hugo/test1=, then the url is: 
      =http://localhost/tests/hugo/test1=.  So the command for rendering the site should be:
      =hugo -b http://localhost/tests/hugo/test1=

**** New variables needed

The following variables are needed to implement the algorithm above:

|-----+------------------------+-----------------+----------------------------+----------------------------------------------|
| NUM | NAME                   | TYPE            | VALUE/DEFAULT              | PURPOSE                                      |
|-----+------------------------+-----------------+----------------------------+----------------------------------------------|
| #1  | local-server-base-path | custom variable | /usr/share/nginx/html/     | part of rendered-site-dir                    |
| #2  | SITE_TARGET_SUBDIR     | file property   | -                          | part of rendered-site-dir and local-site-url |
| #3  | rendered-site-dir      | computed value  | concat #1 #2               | copy published site here                     |
| #4  | local-site-url         | computed value  | concat http://localhost $2 | baseUrl parameter for hugo render command    |
|-----+------------------------+-----------------+----------------------------+----------------------------------------------|

** COMMENT Available export strategies in ox-hugo
   :PROPERTIES:
   :EXPORT_HUGO_WEIGHT: 34
   :END:

1. H: Export What I Mean. This means: Export current tree or whole file:
   - if file has #+title: keyword, export whole file
   - if subtree is valid hugo post subtree, export subtree to hugo post
2. A: Export All What I mean.
   - Export all valid hugo post subtrees to Hugo posts
   - Else if there are no hugo post subtrees and there is a #+title: keyword,
     Eport entire org file to single hugo post
3. h: Export org file to Hugo post.

Keyboard commands in export dispatcher:
Distinguish between 2 extents of export:

4. Subtree
   1. All subtrees

   Also distinguish between 3 actions of export:

   1. To file
   2. To file and open
   3. To temporary buffer



** COMMENT C-c C-e H H: Export “What I Mean”.
   :PROPERTIES:
   :EXPORT_HUGO_WEIGHT: 35
   :END:

     If point is in a valid Hugo post subtree, export that subtree to a Hugo post in Markdown.

     A valid Hugo post subtree is an Org subtree that has the EXPORT_FILE_NAME property set.

     If the file is intended to be exported as a whole (i.e. has the #+title keyword), export the whole Org file to a Hugo post in Markdown.


** COMMENT C-c C-e H h: Export the Org file to a Hugo post in Markdown and open
   :PROPERTIES:
   :EXPORT_HUGO_WEIGHT: 36
   :END:

**  COMMENT C-c C-e H A: Export all “What I Mean”
   :PROPERTIES:
   :EXPORT_HUGO_WEIGHT: 37
   :END:

     If the Org file has one or more ‘valid Hugo post subtrees’, export them to Hugo posts in Markdown.

     If the file is intended to be exported as a whole (i.e. no ‘valid Hugo post subtrees’ at all, and has the #+title keyword), export the whole Org file to a Hugo post in Markdown.

 For only the one-post-per-file flow #

* ox-hugo
  :PROPERTIES:
  :EXPORT_HUGO_WEIGHT: 38
  :END:

#+BEGIN_SRC emacs-lisp
  ;;; Commentary:

  ;; Functions for ox-hugo.  (11 Aug 2018 11:36)

  ;; This package makes it easier to use ox-hugo

  ;; After installing ox-hugo as explained in the next section,
  ;; org-export-dispatch (C-c C-e) will show you the option
  ;; for exporting with hugo (H key).
  ;; Documentation about how to use ox-hugo is found here:
  ;; https://ox-hugo.scripter.co/

  ;; This code requires ox-hugo package.
  ;; Installing: 15 Jun 2019 08:03, what worked:
  ;; list-packages, then find ox-mdx-deck, and install it from the list.
  ;; Had to try 2 times.

  ;;; Code:

  ;; Availability of these 2 packages on melpa is not guaranteed
  ;; on first try.  You may have to try several times
  ;; after running list-packages, and installing ox-mdx-deck from
  ;; the buffer of list-packages:
  (prelude-require-package 'ox-mdx-deck) ;; this may help to get ox-hugo
  (prelude-require-package 'ox-hugo)     ;; ox-hugo is used here (not ox-mdx-deck)

  ;; explicitly require ox-hugo to add it to the dispatcher menu:
  (require 'ox-hugo)

  ;; default export directory
  (defcustom org-hugo-export-dir "~/hugo-exports"
    "Directory for exporting hugo with ox-hugo.")

  (defvar org-hugo-path-of-last-export nil
    "Path of file exported by latest ox-hugo command.")

  ;; overwrite original ox-hugo function to store
  ;; location of last written file
  (defun org-hugo--after-export-function (info outfile)
    "Function to be run after an ox-hugo export.

  Customized version: Store location of last written hugo file.

  This function is called in the very end of
  `org-hugo-export-to-md', `org-hugo-export-as-md' and
  `org-hugo-publish-to-md'.

  INFO is a plist used as a communication channel.

  OUTFILE is the Org exported file name.

  This is an internal function."
    (advice-remove 'org-babel-exp-code #'org-hugo--org-babel-exp-code)
    (when outfile
      (setq org-hugo-path-of-last-export outfile))
    (when (and outfile
               (org-hugo--pandoc-citations-enabled-p info))
      (require 'ox-hugo-pandoc-cite)
      (plist-put info :outfile outfile)
      (plist-put info :front-matter org-hugo--fm)
      (org-hugo-pandoc-cite--parse-citations-maybe info))
    (setq org-hugo--fm nil)
    (setq org-hugo--fm-yaml nil))

  (defun org-hugo-open-last-exported-file ()
    "Open file last exported by ox-hugo."
    (interactive)
    (if org-hugo-path-of-last-export
        (find-file org-hugo-path-of-last-export)
      (message "There has been no ox-hugo export in this emacs session")))

  ;;; use yaml format in export front matter,
  ;;; because most themes use this as default
  (setq org-hugo-front-matter-format "yaml")

  (defhydra hydra-hugo (:color red :columns 3)
    "hugo hydra"

    ("x" org-export-hugo "export hugo")
    ("t" org-hugo-set-title "set title")
    ("f" org-hugo-set-section-filename "set hugo section filename")
    ("d" org-hugo-set-post-directory "set hugo section post directory")
    ("o" org-hugo-open-last-exported-file "open last exported file")
    ("q" quit "exit hydra" :exit t))

  (defun org-hugo-set-title (&optional title)
    "Set value of TITLE property globally in current buffer."
    (interactive "sTitle:")
    (save-excursion
      (org-with-wide-buffer
       (goto-char (point-min))
       (let ((new-line "")
             (here (re-search-forward
                    (concat "^"
                            (regexp-quote (concat "#+" "TITLE" ":"))
                            " ?") nil t)))
         (cond
          (here
           (goto-char here)
           (beginning-of-line)
           (kill-line))
          (t
           (setq new-line "\n")
           (goto-char (point-min))))
         (insert "#+TITLE: " title new-line)))))

  (defun org-hugo-set-section-filename (filename)
    "Set property EXPORT_FILE_NAME in current section."
    (interactive "sFilename: ")
    (org-set-property "EXPORT_FILE_NAME" filename))

  (defun org-hugo-set-post-directory (directory)
    "Set property EXPORT_HUGO_SECTION in current section."
    (interactive "sSection: ")
    (org-set-property "EXPORT_HUGO_SECTION" directory))

  ;;; prepare hugo export
  (defun org-export-hugo ()
    "Prepare hugo export.
  Set ox-hugo export base directory property HUGO_BASE_DIR if needed.
  Set weights.
  Call org-export-dispatch."
    (interactive)
    (org-hugo-set-export-path-if-needed)
    (org-hugo-set-weights)
    (org-export-dispatch))

  (defun org-hugo-set-export-path-if-needed ()
    "If absent, set value of HUGO_BASE_DIR property in current buffer."
    (interactive)
    (let ((hugo-base-dir-property "HUGO_BASE_DIR"))
      (save-excursion
        (org-with-wide-buffer
         (goto-char (point-min))
         (let ((new-line "")
               (here (re-search-forward
                      (concat "^"
                              (regexp-quote (concat "#+" hugo-base-dir-property ":"))
                              " ?") nil t)))
           (unless here
             (setq new-line "\n")
             (goto-char (point-min))
             (insert "#+" hugo-base-dir-property ": " "~/hugo-exports\n")
             (message "I set %s" hugo-base-dir-property)))))))

  ;;; INCOMPLETE
  (defun org-hugo-set-export-path ()
    "Set value of HUGO_BASE_DIR property in current buffer."
    (interactive)
    (let ((hugo-base-dir-property "HUGO_BASE_DIR"))
      (save-excursion
        (org-with-wide-buffer
         (goto-char (point-min))
         (let ((new-line "")
               (here (re-search-forward
                      (concat "^"
                              (regexp-quote (concat "#+" hugo-base-dir-property ":"))
                              " ?") nil t)))
           (unless here
             (setq new-line "\n")
             (goto-char (point-min))
             (insert "#+" hugo-base-dir-property ": " "~/hugo-exports\n")
             (message "I set %s" hugo-base-dir-property)))))))

  (defun org-hugo-set-weights ()
    "Set correct hugo weights.
  Note: the auto-weight option of ox-hugo sets wrong weights, which result
  in subsubsections to be always at the bottom of a subsection, and not
  inside the subsection to which they belong.  Therefore renumbering is
  necessary if editing a site that has nested subsections inside subsections"
    (interactive)
    (let ((weight 0))
      (org-map-entries 'ox-hugo--set-weight))
    ;; The ox-hugo options disappear the second time after calling this:
    ;; (org-export-dispatch)
    (message "Weights for hugo export have been set."))

  (defun ox-hugo--set-weight ()
    "Set EXPORT_HUGO_WEIGHT property for this entry.
  Note: the auto-weight option of ox-hugo sets wrong weights, which result
  in subsubsections to be always at the bottom of a subsection, and not
  inside the subsection to which they belong. Therefore, the present renumbering is
  necessary if editing a site that has nested subsections inside subsections."
     (org-set-property "EXPORT_HUGO_WEIGHT" (format "%d" weight))
     (setq weight (+ 1 weight)))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (defun ox-hugo-clear-contents ()
    "Delete contents of HUGO_BASE_DIR.
  TODO: make this delete only md files.
  Other files should remain, because they may be images (static content).
  Alternatively, put images in static only - not in content.
  See https://discourse.gohugo.io/t/solved-how-to-insert-image-in-my-post/1473/10
  "
    (interactive)
    (let* ((org-use-property-inheritance (org-hugo--selective-property-inheritance))
           (info (org-combine-plists
                  (org-export--get-export-attributes
                   'hugo nil nil
                   ;; subtreep visible-only
                   )
                  (org-export--get-buffer-attributes)
                  (org-export-get-environment 'hugo nil)))
           (pub-dir (org-hugo--get-pub-dir  info)))
      ;; (when (y-or-n-p (format "Delete contents of %s?" pub-dir))
      ;;   (delete-directory pub-dir t)
      ;;   (message "%s deleted!" pub-dir))
      (message "this is the pub dir %s\n" pub-dir)
      ))

  (defun ox-hugo-copy-root-dir ()
    "Copy hugo root directory to kill ring as shell-escaped string.
  Use: Paste the copied string in a shell terminal to go to the root dir,
  and then run hugo-server or hugo or other related commands."
    (interactive)
    (let* ((org-use-property-inheritance (org-hugo--selective-property-inheritance))
           (info (org-combine-plists
                  (org-export--get-export-attributes
                   'hugo nil nil
                   ;; subtreep visible-only
                   )
                  (org-export--get-buffer-attributes)
                  (org-export-get-environment 'hugo nil)))
           (pub-dir (org-hugo--get-pub-dir info)))
      (kill-new
       (shell-quote-argument (file-name-directory (directory-file-name pub-dir))))
      (message "Copied %s"
               (shell-quote-argument (file-name-directory (directory-file-name pub-dir))))))

  ;;; further tests. Prepare hugo export + copy of published data to nginx path
  (defun get-info-for-hugo ()
    "Experimental: Test how hugo gets info properties."
    (interactive)
    (message "The info is: %s" (org-combine-plists
                                (org-export--get-export-attributes
                                 'hugo ;; subtreep visible-only
                                 nil nil
                                 )
                                (org-export--get-buffer-attributes)
                                (org-export-get-environment 'hugo nil ;; subtreep
                                                            )))
    (org-export-get-environment 'hugo nil)
    (org-export--get-buffer-attributes))
#+END_SRC

* hugo-render-and-copy code

Part of the ox-hugo package: Render the md files produced by ox-hugo and copy them to the directory of tne local web server that serves the corresponding site.
See comments in section hugo-render-and-copy.

#+BEGIN_SRC emacs-lisp
  (org-export-define-derived-backend 'hugo 'blackfriday ;hugo < blackfriday < md < html
    :menu-entry
    '(?H "Export to Hugo-compatible Markdown"
         ((?H "Subtree to file"
              (lambda (a _s v _b)
                (org-hugo-export-wim-to-md nil a v)))
          (?h "To file"
              (lambda (a s v _b)
                (org-hugo-export-to-md a s v)))
          (?O "Subtree to file and open"
              (lambda (a _s v _b)
                (if a
                    (org-hugo-export-wim-to-md nil :async v)
                  (org-open-file (org-hugo-export-wim-to-md nil a v)))))
          (?o "To file and open"
              (lambda (a s v _b)
                (if a (org-hugo-export-to-md t s v)
                  (org-open-file (org-hugo-export-to-md nil s v)))))
          (?A "All subtrees to files"
              (lambda (a _s v _b)
                (org-hugo-export-wim-to-md :all-subtrees a v)))
          (?t "To temporary buffer"
              (lambda (a s v _b)
                (org-hugo-export-as-md a s v)))))
  ;;;; translate-alist
    :translate-alist '((code . org-hugo-kbd-tags-maybe)
                       (example-block . org-hugo-example-block)
                       (export-block . org-hugo-export-block)
                       (export-snippet . org-hugo-export-snippet)
                       (headline . org-hugo-headline)
                       (inner-template . org-hugo-inner-template)
                       (keyword . org-hugo-keyword)
                       (link . org-hugo-link)
                       (paragraph . org-hugo-paragraph)
                       (src-block . org-hugo-src-block)
                       (special-block . org-hugo-special-block))
    :filters-alist '((:filter-body . org-hugo-body-filter))
  ;;;; options-alist
    ;;                KEY                       KEYWORD                    OPTION  DEFAULT                     BEHAVIOR
    :options-alist '(;; Variables not setting the front-matter directly
                     (:with-toc nil "toc" org-hugo-export-with-toc)
                     (:section-numbers nil "num" org-hugo-export-with-section-numbers)
                     (:author "AUTHOR" nil user-full-name newline)
                     (:creator "CREATOR" nil org-hugo-export-creator-string)
                     (:with-smart-quotes nil "'" nil) ;Don't use smart quotes; that is done automatically by Blackfriday
                     (:with-special-strings nil "-" nil) ;Don't use special strings for ndash, mdash; that is done automatically by Blackfriday
                     (:with-sub-superscript nil "^" '{}) ;Require curly braces to be wrapped around text to sub/super-scripted
                     (:hugo-with-locale "HUGO_WITH_LOCALE" nil nil)
                     (:hugo-front-matter-format "HUGO_FRONT_MATTER_FORMAT" nil     org-hugo-front-matter-format)
                     (:hugo-level-offset "HUGO_LEVEL_OFFSET" nil "1")
                     (:hugo-preserve-filling "HUGO_PRESERVE_FILLING" nil org-hugo-preserve-filling) ;Preserve breaks so that text filling in Markdown matches that of Org
                     (:hugo-delete-trailing-ws "HUGO_DELETE_TRAILING_WS" nil org-hugo-delete-trailing-ws)
                     (:hugo-section "HUGO_SECTION" nil org-hugo-section)
                     (:hugo-bundle "HUGO_BUNDLE" nil nil)
                     (:hugo-base-dir "HUGO_BASE_DIR" nil nil)
                     (:site-target-subdir "SITE_TARGET_SUBDIR" nil nil) ;Copy rendered files here
                     (:hugo-code-fence "HUGO_CODE_FENCE" nil t) ;Prefer to generate triple-backquoted Markdown code blocks by default.
                     (:hugo-use-code-for-kbd "HUGO_USE_CODE_FOR_KBD" nil org-hugo-use-code-for-kbd)
                     (:hugo-prefer-hyphen-in-tags "HUGO_PREFER_HYPHEN_IN_TAGS" nil org-hugo-prefer-hyphen-in-tags)
                     (:hugo-allow-spaces-in-tags "HUGO_ALLOW_SPACES_IN_TAGS" nil org-hugo-allow-spaces-in-tags)
                     (:hugo-auto-set-lastmod "HUGO_AUTO_SET_LASTMOD" nil org-hugo-auto-set-lastmod)
                     (:hugo-custom-front-matter "HUGO_CUSTOM_FRONT_MATTER" nil nil space)
                     (:hugo-blackfriday "HUGO_BLACKFRIDAY" nil nil space)
                     (:hugo-front-matter-key-replace "HUGO_FRONT_MATTER_KEY_REPLACE" nil nil space)
                     (:hugo-date-format "HUGO_DATE_FORMAT" nil org-hugo-date-format)
                     (:hugo-paired-shortcodes "HUGO_PAIRED_SHORTCODES" nil org-hugo-paired-shortcodes space)
                     (:hugo-pandoc-citations "HUGO_PANDOC_CITATIONS" nil nil)
                     (:bibliography "BIBLIOGRAPHY" nil nil newline) ;Used in ox-hugo-pandoc-cite

                     ;; Front-matter variables
                     ;; https://gohugo.io/content-management/front-matter/#front-matter-variables
                     ;; aliases
                     (:hugo-aliases "HUGO_ALIASES" nil nil space)
                     ;; audio
                     (:hugo-audio "HUGO_AUDIO" nil nil)
                     ;; date
                     ;; "date" is parsed from the Org #+date or subtree property EXPORT_HUGO_DATE
                     (:date "DATE" nil nil)
                     ;; description
                     (:description "DESCRIPTION" nil nil)
                     ;; draft
                     ;; "draft" value interpreted by the TODO state of a
                     ;; post as Org subtree gets higher precedence.
                     (:hugo-draft "HUGO_DRAFT" nil nil)
                     ;; expiryDate
                     (:hugo-expirydate "HUGO_EXPIRYDATE" nil nil)
                     ;; headless (only for Page Bundles - Hugo v0.35+)
                     (:hugo-headless "HUGO_HEADLESS" nil nil)
                     ;; images
                     (:hugo-images "HUGO_IMAGES" nil nil newline)
                     ;; isCJKLanguage
                     (:hugo-iscjklanguage "HUGO_ISCJKLANGUAGE" nil nil)
                     ;; keywords
                     ;; "keywords" is parsed from the Org #+keywords or
                     ;; subtree property EXPORT_KEYWORDS.
                     (:keywords "KEYWORDS" nil nil newline)
                     ;; layout
                     (:hugo-layout "HUGO_LAYOUT" nil nil)
                     ;; lastmod
                     (:hugo-lastmod "HUGO_LASTMOD" nil nil)
                     ;; linkTitle
                     (:hugo-linktitle "HUGO_LINKTITLE" nil nil)
                     ;; locale (used in Hugo internal templates)
                     (:hugo-locale "HUGO_LOCALE" nil nil)
                     ;; markup
                     (:hugo-markup "HUGO_MARKUP" nil nil) ;default is "md"
                     ;; menu
                     (:hugo-menu "HUGO_MENU" nil nil space)
                     (:hugo-menu-override "HUGO_MENU_OVERRIDE" nil nil space)
                     ;; outputs
                     (:hugo-outputs "HUGO_OUTPUTS" nil nil space)
                     ;; publishDate
                     (:hugo-publishdate "HUGO_PUBLISHDATE" nil nil)
                     ;; series
                     (:hugo-series "HUGO_SERIES" nil nil newline)
                     ;; slug
                     (:hugo-slug "HUGO_SLUG" nil nil)
                     ;; taxomonomies - tags, categories
                     (:hugo-tags "HUGO_TAGS" nil nil newline)
                     ;; #+hugo_tags are used to set the post tags in Org
                     ;; files written for file-based exports.  But for
                     ;; subtree-based exports, the EXPORT_HUGO_TAGS
                     ;; property can be used to override inherited tags
                     ;; and Org-style tags.
                     (:hugo-categories "HUGO_CATEGORIES" nil nil newline)
                     ;; #+hugo_categories are used to set the post
                     ;; categories in Org files written for file-based
                     ;; exports.  But for subtree-based exports, the
                     ;; EXPORT_HUGO_CATEGORIES property can be used to
                     ;; override inherited categories and Org-style
                     ;; categories (Org-style tags with "@" prefix).
                     ;; resources
                     (:hugo-resources "HUGO_RESOURCES" nil nil space)
                     ;; title
                     ;; "title" is parsed from the Org #+title or the subtree heading.
                     ;; type
                     (:hugo-type "HUGO_TYPE" nil nil)
                     ;; url
                     (:hugo-url "HUGO_URL" nil nil)
                     ;; videos
                     (:hugo-videos "HUGO_VIDEOS" nil nil newline)
                     ;; weight
                     (:hugo-weight "HUGO_WEIGHT" nil nil space)))

  (defcustom local-server-base-path "/usr/share/nginx/html/"
    "Websites should be published inside this directory.")

  (defun hugo-render ()
    "Render exported md to html from contents dir to local web server dir.
  Issue a single command like this:
  hugo -b <base url> -c <path to md contents dir> -d <path to local website dir>
  For example:
  hugo -b http://localhost/tests/test2/ -c /home/iani/Dev/SITES/learn1/content -d /usr/share/nginx/html/tests/test2/ 
  "
    (interactive)
    (let* ((subtreep nil)
           (visible-only nil)
           (info
            (org-combine-plists
             (org-export--get-export-attributes
              'hugo subtreep visible-only)
             (org-export--get-buffer-attributes)
             (org-export-get-environment 'hugo subtreep)))
           (export-base-dir
            (concat
             (file-name-directory
              (directory-file-name
               (file-name-directory (directory-file-name (org-hugo--get-pub-dir info)))))
             "public/"))
           (site-target-subdir (or (plist-get info :site-target-subdir) "/"))
           )
      (message "export base dir is: %s" ;; (plist-get info :hugo-base-dir)
               export-base-dir)
      ;; (message "site-target-dubdir is: %s" (plist-get info :site-target-subdir))
      ))
#+END_SRC
